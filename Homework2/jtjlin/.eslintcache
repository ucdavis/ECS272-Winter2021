[{"/mnt/e/ECS_272/HWs/ECS272-Winter2021/Homework2/jtjlin/src/index.js":"1","/mnt/e/ECS_272/HWs/ECS272-Winter2021/Homework2/jtjlin/src/App.js":"2","/mnt/e/ECS_272/HWs/ECS272-Winter2021/Homework2/jtjlin/src/reportWebVitals.js":"3","/mnt/e/ECS_272/HWs/ECS272-Winter2021/Homework2/jtjlin/src/BarChart.js":"4","/mnt/e/ECS_272/HWs/ECS272-Winter2021/Homework2/jtjlin/src/GeoChart.js":"5","/mnt/e/ECS_272/HWs/ECS272-Winter2021/Homework2/jtjlin/src/useResizeObserver.js":"6","/mnt/e/ECS_272/HWs/ECS272-Winter2021/Homework2/jtjlin/src/GroupBy.js":"7","/mnt/e/ECS_272/HWs/ECS272-Winter2021/Homework2/jtjlin/src/BrushChart.js":"8","/mnt/e/ECS_272/HWs/ECS272-Winter2021/Homework2/jtjlin/src/StackedAreaChart.js":"9","/mnt/e/ECS_272/HWs/ECS272-Winter2021/Homework2/jtjlin/src/CheckPreviousState.js":"10","/mnt/e/ECS_272/HWs/ECS272-Winter2021/Homework2/jtjlin/src/LineChart.js":"11","/mnt/e/ECS_272/HWs/ECS272-Winter2021/Homework2/jtjlin/src/ParallelCoordChart.js":"12"},{"size":500,"mtime":1612125633782,"results":"13","hashOfConfig":"14"},{"size":1800,"mtime":1612336384294,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1611965283382,"results":"16","hashOfConfig":"14"},{"size":2969,"mtime":1612041526879,"results":"17","hashOfConfig":"14"},{"size":6567,"mtime":1612337768903,"results":"18","hashOfConfig":"14"},{"size":1246,"mtime":1612124174133,"results":"19","hashOfConfig":"14"},{"size":269,"mtime":1612161657903,"results":"20","hashOfConfig":"14"},{"size":6876,"mtime":1612260899323,"results":"21","hashOfConfig":"14"},{"size":5608,"mtime":1612332764407,"results":"22","hashOfConfig":"14"},{"size":298,"mtime":1612260431585,"results":"23","hashOfConfig":"14"},{"size":6290,"mtime":1612331897880,"results":"24","hashOfConfig":"14"},{"size":9931,"mtime":1612335813352,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"pji757",{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"28"},"/mnt/e/ECS_272/HWs/ECS272-Winter2021/Homework2/jtjlin/src/index.js",[],["57","58"],"/mnt/e/ECS_272/HWs/ECS272-Winter2021/Homework2/jtjlin/src/App.js",["59","60","61"],"import React from 'react';\nimport BarChart from './BarChart';\nimport GeoChart from './GeoChart';\nimport LineChart from './LineChart';\nimport StackedAreaChart from './StackedAreaChart';\nimport ParallelCoordChart from './ParallelCoordChart';\nimport data from  './datasets/SF_Historical_Ballot_Measures.csv';\nimport PDdata from './datasets/Police_Department_Incidents_-_Previous_Year__2016_.csv';\nimport worldmapData from './san-francisco.geo.json'; //'./NorthAmerica.geo.json'; //'./SanFrancisco.Neighborhoods.json';\nimport './App.css';\n\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state ={ //data that can change. passed down to child components as props\n      //data: data,\n      pdData: PDdata,\n      worldData: worldmapData,\n      //id: \"chart-1\"\n    }\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <h2>ECS 272 Assignment 2 - Jeremy Lin</h2>\n        <div id=\"container\"> \n        <div id=\"tooltip\"></div>\n        </div>\n        <div id=\"map\"></div>\n        <div class=\"info\">Attempted Chloropleth map of crime over each district</div>\n        <GeoChart mapData={this.state.worldData} pdData={this.state.pdData}/>\n        <div class=\"info\">Line Chart of Crime Incidents in SanFrancisco over each month in 2016</div>\n        <LineChart data={this.state.pdData}/>\n        <div class=\"info\">Parallel Coord Chart of Crime Incidents in SanFrancisco </div>\n        <ParallelCoordChart data={this.state.pdData}/>\n        {/* <div class=\"info\">Stacked Area Chart of Crime Incidents in SanFrancisco </div> */}\n        {/* <StackedAreaChart data={this.state.pdData}/>  //NOT IMPLEMENTED   */}\n        {/* <BarChart data={this.state.data} width={this.state.width} height={this.state.height} />   */}\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","/mnt/e/ECS_272/HWs/ECS272-Winter2021/Homework2/jtjlin/src/reportWebVitals.js",[],"/mnt/e/ECS_272/HWs/ECS272-Winter2021/Homework2/jtjlin/src/BarChart.js",[],"/mnt/e/ECS_272/HWs/ECS272-Winter2021/Homework2/jtjlin/src/GeoChart.js",[],"/mnt/e/ECS_272/HWs/ECS272-Winter2021/Homework2/jtjlin/src/useResizeObserver.js",[],"/mnt/e/ECS_272/HWs/ECS272-Winter2021/Homework2/jtjlin/src/GroupBy.js",[],["62","63"],"/mnt/e/ECS_272/HWs/ECS272-Winter2021/Homework2/jtjlin/src/BrushChart.js",["64"],"/mnt/e/ECS_272/HWs/ECS272-Winter2021/Homework2/jtjlin/src/StackedAreaChart.js",["65"],"import React, {useRef, useEffect, useState} from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport {select, line, curveCardinal, axisBottom, axisLeft} from \"d3\";\r\nimport useResizeObserver from \"./useResizeObserver\";\r\nimport GroupBy from \"./GroupBy\";\r\n\r\n/* code adapted from \"The Muratorium\" d3 react Youtube tutorials */\r\n\r\n/* NOT IMPLEMENTED YET*/\r\n\r\n\r\nfunction StackedAreaChart({data}){\r\n    const svgRef = useRef(); //reference object hook that can be passed to d3\r\n    const wrapperRef = useRef();\r\n    const dimensions = useResizeObserver(wrapperRef);\r\n\r\n    \r\n    var dateParse = d3.timeParse(\"%m/%d/%Y %H:%M:%S %p\");\r\n \r\n    useEffect(() => { //hook that gets triggered everytime elements change \r\n        //data filtering\r\n        d3.csv(data)\r\n        .then(csv => {\r\n            // create data by selecting two columns from csv \r\n            var filterdata = csv.map(row => {\r\n                return {\r\n                xCoord: Number(row['X']),\r\n                yCoord: Number(row['Y']),\r\n                district: row['PdDistrict'],\r\n                Category: row['Category'],\r\n                cDate: dateParse(row['Date']),\r\n                cMonth: dateParse(row['Date']).getMonth()+1\r\n                }\r\n            })\r\n            //console.log(csv);\r\n            const sortedata = GroupBy(filterdata,\"cMonth\");\r\n            //console.log(sortedata);\r\n            //console.log(Object.values(sortedata));\r\n\r\n            const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n                        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n                        ];\r\n\r\n            var plotdata = Object.values(sortedata).map((row, index) => {\r\n                return {\r\n                    Month: Number(index+1),\r\n                    Monthname: monthNames[index],\r\n                    cSum: row.length\r\n                }\r\n            })\r\n            //console.log(plotdata);\r\n\r\n            //if have more time add more points - get actual dates\r\n\r\n            //use dimensions otherwise fallback to boundingClientRect dom element\r\n            const{width, height} = \r\n            dimensions || wrapperRef.current.getBoundingClientRect();   \r\n\r\n            const svg = select(svgRef.current); //pass svg element to d3\r\n\r\n            //setup scales - transforms input value into visual representation\r\n            // const xScale = d3.scaleBand()\r\n            //  .domain(plotdata.map(d => d.Monthname))\r\n            //  .rangeRound([0, width]);\r\n\r\n            const xScale = d3.scaleLinear()\r\n             .domain([d3.min(plotdata, d => d.Month),d3.max(plotdata, d => d.Month)])\r\n             .rangeRound([0, width]);\r\n\r\n            const yScale = d3.scaleLinear()\r\n             .domain([d3.min(plotdata, d => d.cSum)-100,d3.max(plotdata, d => d.cSum)+100])\r\n             .range([height, 0]);\r\n\r\n\r\n            var lineGenerator = line() //where to render each dot on line\r\n             .x(d => xScale(d.Month)) //offset by 55 why?\r\n             .y(d => yScale(d.cSum))\r\n             .curve(curveCardinal);\r\n\r\n            // svg.append(\"path\")\r\n            //  .datum(plotdata) // 10. Binds data to the line \r\n            //  .attr(\"fill\", \"none\")\r\n            //  .attr(\"stroke\", \"steelblue\")\r\n            //  .attr(\"stroke-width\", 1.5)\r\n            //  .attr(\"stroke-linejoin\", \"round\")\r\n            //  .attr(\"stroke-linecap\", \"round\")\r\n            //  .attr(\"d\", myLine); // 11. Calls the line generator             \r\n\r\n            //attach d attribute to each path element, need to wrap data array in [] because want 1 path for whole array\r\n            svg.selectAll(\".myLine\") //synch with all data elements\r\n             .data([plotdata])\r\n             //.datum(plotdata)\r\n             .join(\"path\")\r\n             .attr(\"class\", \"myLine\")\r\n             .attr(\"stroke\", \"steelblue\")\r\n             .attr(\"stroke-width\", 1.5)\r\n             .attr(\"stroke-linejoin\", \"round\")\r\n             .attr(\"stroke-linecap\", \"round\")\r\n             .attr(\"fill\", \"none\")\r\n             .attr(\"d\", lineGenerator); // call line generator\r\n\r\n\r\n            svg.selectAll(\".myDot\") //Selects all defined elements in the DOM and hands off a reference to the next step in the chain.\r\n             .data(plotdata) //connect chart data with DOM <rect/> elements\r\n             .join(\"circle\") // appends a new SVG rect element for each element in our chartdata array.\r\n             .attr(\"class\", \"myDot\")\r\n             .attr('r',1.5)\r\n             .attr('cy', (d) => yScale(d.cSum)) //since this is a vertical bar chart we start the bottom of the bars at the bottom of the chart\r\n             .attr('cx', (d) => xScale(d.Month)) // bar x position \r\n             .attr(\"fill\",\"blue\"); // color of the bar\r\n\r\n            // x and y axis\r\n            const xAxis = axisBottom(xScale); // call xaxis function with current svg selection\r\n            svg.select(\".x-axis\")\r\n            .style(\"transform\", `translateY(750px)`)\r\n            .call(xAxis);\r\n\r\n            const yAxis = axisLeft(yScale);\r\n            svg.select(\".y-axis\")\r\n            .style(\"transform\", \"translateX(0px)\")\r\n            .call(yAxis);\r\n                     \r\n   \r\n            \r\n        })\r\n    }, [data, dateParse, dimensions]); //dependencies\r\n\r\n    return (\r\n        //reference wrapperRef for dimensions of div, svg-dom element\r\n        <div ref={wrapperRef} style={{ marginBottom: \"2rem\"}}> \r\n            <svg ref={svgRef}>\r\n                <g className=\"x-axis\" />\r\n                <g className=\"y-axis\" />  \r\n            </svg> \r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default StackedAreaChart;","/mnt/e/ECS_272/HWs/ECS272-Winter2021/Homework2/jtjlin/src/CheckPreviousState.js",[],["66","67"],"/mnt/e/ECS_272/HWs/ECS272-Winter2021/Homework2/jtjlin/src/LineChart.js",["68"],"import React, {useRef, useEffect, useState} from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport {select, line, curveCardinal, axisBottom, axisLeft} from \"d3\";\r\nimport useResizeObserver from \"./useResizeObserver\";\r\nimport GroupBy from \"./GroupBy\";\r\n\r\n/* code adapted from \"The Muratorium\" d3 react Youtube tutorials v=bPNkdoEqfVY */\r\n/* brush chart: total crime -y axis , year - x axis*/\r\n\r\nfunction LineChart({data}){\r\n    const svgRef = useRef(); //reference object hook that can be passed to d3\r\n    const wrapperRef = useRef();\r\n    const dimensions = useResizeObserver(wrapperRef);\r\n    \r\n    var dateParse = d3.timeParse(\"%m/%d/%Y %H:%M:%S %p\");\r\n \r\n    useEffect(() => { //hook that gets triggered everytime elements change \r\n        //data filtering\r\n        d3.csv(data)\r\n        .then(csv => {\r\n            // create data by selecting two columns from csv \r\n            var filterdata = csv.map(row => {\r\n                return {\r\n                xCoord: Number(row['X']),\r\n                yCoord: Number(row['Y']),\r\n                district: row['PdDistrict'],\r\n                Category: row['Category'],\r\n                cDate: dateParse(row['Date']),\r\n                cMonth: dateParse(row['Date']).getMonth()+1\r\n                }\r\n            })\r\n            //console.log(csv);\r\n            const sortedata = GroupBy(filterdata,\"cMonth\");\r\n            //console.log(sortedata);\r\n            //console.log(Object.values(sortedata));\r\n\r\n            const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n                        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n                        ];\r\n\r\n            var plotdata = Object.values(sortedata).map((row, index) => {\r\n                return {\r\n                    Month: index+1,\r\n                    Monthname: monthNames[index],\r\n                    cSum: row.length\r\n                }\r\n            })\r\n            //console.log(plotdata);\r\n\r\n            //if have more time add more points - get actual dates\r\n\r\n            //use dimensions otherwise fallback to boundingClientRect dom element\r\n            const{width, height} = \r\n            dimensions || wrapperRef.current.getBoundingClientRect();   \r\n\r\n            const svg = select(svgRef.current); //pass svg element to d3\r\n\r\n            //setup scales - transforms input value into visual representation\r\n            const xScale = d3.scaleBand()\r\n             .domain(plotdata.map(d => d.Monthname))\r\n             .rangeRound([0, width]);\r\n\r\n            const yScale = d3.scaleLinear()\r\n             .domain([d3.min(plotdata, d => d.cSum)-100,d3.max(plotdata, d => d.cSum)+100])\r\n             .range([height, 0]);\r\n\r\n\r\n            var lineGenerator = line() //where to render each dot on line\r\n             .x(d => xScale(d.Monthname)+55) //offset by 55 why?\r\n             .y(d => yScale(d.cSum))\r\n             .curve(curveCardinal);\r\n\r\n            // svg.append(\"path\")\r\n            //  .datum(plotdata) // 10. Binds data to the line \r\n            //  .attr(\"fill\", \"none\")\r\n            //  .attr(\"stroke\", \"steelblue\")\r\n            //  .attr(\"stroke-width\", 1.5)\r\n            //  .attr(\"stroke-linejoin\", \"round\")\r\n            //  .attr(\"stroke-linecap\", \"round\")\r\n            //  .attr(\"d\", myLine); // 11. Calls the line generator             \r\n\r\n            //attach d attribute to each path element, need to wrap data array in [] because want 1 path for whole array\r\n            svg.selectAll(\".myLine\") //synch with all data elements\r\n             .data([plotdata]) //whole thing\r\n             .datum(plotdata) //single data point\r\n             .join(\"path\")\r\n             .attr(\"class\", \"myLine\")\r\n             .attr(\"stroke\", \"steelblue\")\r\n             .attr(\"stroke-width\", 1.5)\r\n             .attr(\"stroke-linejoin\", \"round\")\r\n             .attr(\"stroke-linecap\", \"round\")\r\n             .attr(\"fill\", \"none\")\r\n             .attr(\"d\", lineGenerator); // call line generator\r\n\r\n\r\n            svg.selectAll(\".myDot\") //Selects all defined elements in the DOM and hands off a reference to the next step in the chain.\r\n             .data(plotdata) //connect chart data with DOM <rect/> elements\r\n             .join(\"circle\") // appends a new SVG rect element for each element in our chartdata array.\r\n             .attr(\"class\", \"myDot\")\r\n             .attr('r',1.5)\r\n             .attr('cy', (d) => yScale(d.cSum)) //since this is a vertical bar chart we start the bottom of the bars at the bottom of the chart\r\n             .attr('cx', (d) => xScale(d.Monthname)+55) // bar x position \r\n             .attr(\"fill\",\"blue\"); // color of the bar\r\n\r\n            // x and y axis\r\n            const xAxis = axisBottom(xScale); // call xaxis function with current svg selection\r\n            svg.select(\".x-axis\")\r\n            .style(\"transform\", `translateY(750px)`)\r\n            .call(xAxis)\r\n            .call(g =>\r\n                g.select(\".tick:last-of-type text\")\r\n                .clone()\r\n                .attr(\"text-anchor\", \"middle\")\r\n                .attr(\"x\", -(width) / 2)\r\n                .attr(\"y\", 35)\r\n                .attr(\"font-weight\", \"bold\")\r\n                .text(\"Month\").attr(\"transform\",\"rotate(-1)\") //need to untransform earlier text transform on x-axis\r\n                );\r\n\r\n            const yAxis = axisLeft(yScale);\r\n            svg.select(\".y-axis\")\r\n            .style(\"transform\", \"translateX(0px)\")\r\n            .call(yAxis)\r\n            .call(g =>\r\n                g.select(\".tick:last-of-type text\")\r\n                    .clone()\r\n                    .attr(\"transform\", `rotate(-90)`)\r\n                    .attr(\"text-anchor\", \"middle\")\r\n                    .attr(\"x\", -(height / 2))\r\n                    .attr(\"y\", -80)\r\n                    .attr(\"font-weight\", \"bold\")\r\n                    .text(\"Crime Incidents\")\r\n                );\r\n                     \r\n        })\r\n    }, [data, dateParse, dimensions]); //dependencies\r\n\r\n    return (\r\n        //reference wrapperRef for dimensions of div, svg-dom element\r\n        <div ref={wrapperRef} style={{ marginBottom: \"5rem\"}}> \r\n            <svg ref={svgRef}>\r\n                <g className=\"x-axis\" />\r\n                <g className=\"y-axis\" />   \r\n            </svg> \r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default LineChart;","/mnt/e/ECS_272/HWs/ECS272-Winter2021/Homework2/jtjlin/src/ParallelCoordChart.js",["69","70"],"import React, {useRef, useEffect, useState} from 'react';\r\nimport {select} from \"d3\";\r\nimport useResizeObserver from \"./useResizeObserver\";\r\nimport GroupBy from \"./GroupBy\";\r\nimport * as d3 from \"d3\";\r\n\r\n//maybe axis: month day time location\r\n\r\nfunction ParallelCoordChart({data}){\r\n\r\n    const svgRef = useRef();\r\n    const wrapperRef = useRef();\r\n    const dimensions = useResizeObserver(wrapperRef);\r\n    //console.log(data);\r\n    var dateParse = d3.timeParse(\"%m/%d/%Y %H:%M:%S %p\");\r\n\r\n    // let temp1 = dateParse('01/29/2017 12:00:00 AM');\r\n    // console.log(temp1);\r\n    // console.log(temp1.getMonth()+1,temp1.getYear()+1900,temp1.getHours());\r\n    \r\n\r\n    //called initially and then for each data update\r\n    useEffect(() => {\r\n        const svg = select(svgRef.current);\r\n\r\n        //data filtering\r\n        d3.csv(data)\r\n        .then(csv => {\r\n          // create data by selecting two columns from csv \r\n          var filterdata = csv.map(row => {\r\n              return {\r\n              cDate: dateParse(row['Date']),\r\n              District: row['PdDistrict'],\r\n              Category: row['Category'],\r\n              Resolution: row['Resolution'],\r\n              Month: dateParse(row['Date']).getMonth()+1,\r\n              DayOfWeek: row['DayOfWeek'],\r\n              Time: row['Time']\r\n              }\r\n          })\r\n\r\n          //use dimensions otherwise fallback to boundingClientRect dom element\r\n          const{width, height} = \r\n            dimensions || wrapperRef.current.getBoundingClientRect();\r\n\r\n        // set the dimensions and margins of the graph\r\n        //var margin = {top: 30, right: 10, bottom: 10, left: 10};//,\r\n            // width = 960 - margin.left - margin.right,\r\n            // height = 500 - margin.top - margin.bottom;\r\n\r\n        \r\n\r\n        // var svg = d3.select(\"body\").append(\"svg\")\r\n        //     .attr(\"width\", width + margin.left + margin.right)\r\n        //     .attr(\"height\", height + margin.top + margin.bottom)\r\n        // .append(\"g\")\r\n        //     .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n            //(\"Category\" || \"Resolution\" || \"DayOfWeek\" || \"Time\" || \"PdDistrict\")\r\n        //hard coded axis values since not all scale linear with number\r\n        var dimensionsN = [\r\n            {\r\n                item: \"District\",\r\n                scale: d3.scalePoint().range([0,height]),\r\n                type: \"string\"\r\n            },\r\n            {\r\n                item: \"Month\",\r\n                scale: d3.scaleLinear().range([height,0]),\r\n                type: \"number\"\r\n            },\r\n            {\r\n                item: \"DayOfWeek\",\r\n                scale: d3.scalePoint().range([height,0]),\r\n                type: \"string\"\r\n            },\r\n            {\r\n                item: \"Category\",\r\n                scale: d3.scalePoint().range([0,height]),\r\n                type: \"string\"\r\n            },\r\n            {\r\n                item: \"Resolution\",\r\n                scale: d3.scalePoint().range([height,0]),\r\n                type: \"string\"\r\n            },\r\n            // {\r\n            //     item: \"Time\",\r\n            //     scale: d3.scaleTime(),\r\n            //     type: \"string\"\r\n            // }\r\n        ];\r\n\r\n        var x = d3.scalePoint().domain(dimensionsN.map(function(d) {return d.item;})).range([0, width]);//,\r\n        //     y = {},\r\n        //     dragging = {};\r\n\r\n        // var line = d3.line(),\r\n        //     axis = d3.axisLeft(),\r\n        //     background,\r\n        //     foreground;\r\n\r\n        var line = d3.line()\r\n            .defined(function(d) { return !isNaN(d[1]); });\r\n        \r\n        var yAxis = d3.axisLeft();\r\n        // Extract the list of dimensions and create a scale for each.\r\n        // x.domain( dimensionsN = Object.keys(filterdata[0]).filter(function(d) {\r\n        //     return d !== \"cDate\" && (y[d] = d3.scaleBand() //exclude date\r\n        //         .domain(d3.extent(filterdata, function(p) { return +p[d]; }))\r\n        //         .range([height, 0]));\r\n        // }));\r\n\r\n        //console.log(dimensionsN);\r\n\r\n        // Add grey background lines for context.\r\n        // background = svg.append(\"g\")\r\n        //     .attr(\"class\", \"background\")\r\n        //     .selectAll(\"path\")\r\n        //     .data(filterdata)\r\n        //     .enter().append(\"path\")\r\n        //     .attr(\"d\", path);\r\n\r\n        // // Add blue foreground lines for focus.\r\n        // foreground = svg.append(\"g\")\r\n        //     .attr(\"class\", \"foreground\")\r\n        //     .selectAll(\"path\")\r\n        //     .data(filterdata)\r\n        //     .enter().append(\"path\")\r\n        //     .attr(\"d\", path);\r\n\r\n        // // Add a group element for each dimension.\r\n        // var g = svg.selectAll(\".dimension\")\r\n        //     .data(dimensionsN)\r\n        //     .enter().append(\"g\")\r\n        //     .attr(\"class\", \"dimension\")\r\n        //     .attr(\"transform\", function(d) { return \"translate(\" + x(d.name) + \")\"; })\r\n        //     .call(d3.drag()\r\n        //         .subject(function(d) { return {x: x(d)}; })\r\n        //         .on(\"start\", function(d) {\r\n        //         dragging[d] = x(d);\r\n        //         background.attr(\"visibility\", \"hidden\");\r\n        //         })\r\n        //         .on(\"drag\", function(d) {\r\n        //         dragging[d] = function(event,d) {Math.min(width, Math.max(0, event.x))};\r\n        //         foreground.attr(\"d\", path);\r\n        //         dimensionsN.sort(function(a, b) { return position(a) - position(b); });\r\n        //         x.domain(dimensionsN);\r\n        //         g.attr(\"transform\", function(d) { return \"translate(\" + position(d) + \")\"; })\r\n        //         })\r\n        //         .on(\"end\", function(d) {\r\n        //         delete dragging[d];\r\n        //         transition(d3.select(this)).attr(\"transform\", \"translate(\" + x(d) + \")\");\r\n        //         transition(foreground).attr(\"d\", path);\r\n        //         background\r\n        //             .attr(\"d\", path)\r\n        //             .transition()\r\n        //             .delay(500)\r\n        //             .duration(0)\r\n        //             .attr(\"visibility\", null);\r\n        //         }));\r\n\r\n        var dimension = svg.selectAll(\".dimension\")\r\n            .data(dimensionsN)\r\n            .enter().append(\"g\")\r\n            .attr(\"class\", \"gdimension\")\r\n            .attr(\"transform\", function(d) { return \"translate(\" + x(d.item) +    \")\"; });\r\n            \r\n        dimensionsN.forEach(function(dimension) {\r\n            dimension.scale.domain(dimension.type === \"number\"\r\n                ? d3.extent(filterdata, function(d) { return +d[dimension.item]; })\r\n                : filterdata.map(function(d) { return d[dimension.item]; }).sort());\r\n            });\r\n\r\n        svg.append(\"g\")\r\n            .attr(\"class\", \"background\")\r\n            .selectAll(\"path\")\r\n            .data(filterdata)\r\n            .enter().append(\"path\")\r\n            .attr(\"d\", draw);\r\n      \r\n        svg.append(\"g\")\r\n            .attr(\"class\", \"foreground\")\r\n            .selectAll(\"path\")\r\n            .data(filterdata)\r\n            .enter().append(\"path\")\r\n            .attr(\"d\", draw);\r\n\r\n        dimension.append(\"g\")\r\n            .attr(\"class\", \"axis\")\r\n            .each(function(d) { d3.select(this).call(yAxis.scale(d.scale)); })\r\n            .append(\"text\")\r\n            .attr(\"class\", \"title\")\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .attr(\"y\", -9)\r\n            .text(function(d) { return d.item; });\r\n\r\n        function draw(d) {\r\n            return line(dimensionsN.map(function(dimension) {\r\n                return [x(dimension.item), dimension.scale(d[dimension.item])];\r\n            }));\r\n        }\r\n\r\n        // Add an axis and title.\r\n        // g.append(\"g\")\r\n        //     .attr(\"class\", \"axis\")\r\n        //     .each(function(d) { d3.select(this).call(axis.scale(y[d])); })\r\n        //     .append(\"text\")\r\n        //     .style(\"text-anchor\", \"middle\")\r\n        //     .attr(\"y\", -9)\r\n        //     .text(function(d) { return d; });\r\n\r\n        // // Add and store a brush for each axis.\r\n        // g.append(\"g\")\r\n        //     .attr(\"class\", \"brush\")\r\n        //     // .each(function(event, d) {\r\n        //     //     d3.select(this).call(y[d].brush = d3.brushY(y[d]).on(\"brushstart\", brushstart(event)).on(\"brush\", brush));\r\n        //     // })\r\n        //     .selectAll(\"rect\")\r\n        //     .attr(\"x\", -8)\r\n        //     .attr(\"width\", 16);\r\n\r\n        // function position(d) {\r\n        //     var v = dragging[d];\r\n        //     return v == null ? x(d) : v;\r\n        //     }\r\n    \r\n        //     function transition(g) {\r\n        //     return g.transition().duration(500);\r\n        //     }\r\n    \r\n        //     // Returns the path for a given data point.\r\n        //     function path(d) {\r\n        //     return line(dimensionsN.map(function(p) { return [position(p), y[p](d[p])]; }));\r\n        //     }\r\n    \r\n        //     function brushstart(event) {\r\n        //        event.sourceEvent.stopPropagation();\r\n        //     }\r\n    \r\n        //     // Handles a brush event, toggling the display of foreground lines.\r\n        //     function brush() {\r\n        //     var actives = dimensionsN.filter(function(p) { return !y[p].brush.empty(); }),\r\n        //         extents = actives.map(function(p) { return y[p].brush.extent(); });\r\n        //     foreground.style(\"display\", function(d) {\r\n        //         return actives.every(function(p, i) {\r\n        //         return extents[i][0] <= d[p] && d[p] <= extents[i][1];\r\n        //         }) ? null : \"none\";\r\n        //     });\r\n        //     }\r\n        });\r\n\r\n        \r\n\r\n    }, [data, dimensions, dateParse]); //dependencies\r\n\r\n    return (\r\n        //reference wrapperRef for dimensions of div\r\n        <div ref={wrapperRef} style={{ marginBottom: \"2rem\"}}> \r\n            <svg ref={svgRef}></svg>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default ParallelCoordChart;",{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":2,"column":8,"nodeType":"77","messageId":"78","endLine":2,"endColumn":16},{"ruleId":"75","severity":1,"message":"79","line":5,"column":8,"nodeType":"77","messageId":"78","endLine":5,"endColumn":24},{"ruleId":"75","severity":1,"message":"80","line":7,"column":8,"nodeType":"77","messageId":"78","endLine":7,"endColumn":12},{"ruleId":"71","replacedBy":"81"},{"ruleId":"73","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":143,"column":8,"nodeType":"85","endLine":143,"endColumn":37,"suggestions":"86"},{"ruleId":"75","severity":1,"message":"87","line":1,"column":35,"nodeType":"77","messageId":"78","endLine":1,"endColumn":43},{"ruleId":"71","replacedBy":"88"},{"ruleId":"73","replacedBy":"89"},{"ruleId":"75","severity":1,"message":"87","line":1,"column":35,"nodeType":"77","messageId":"78","endLine":1,"endColumn":43},{"ruleId":"75","severity":1,"message":"87","line":1,"column":35,"nodeType":"77","messageId":"78","endLine":1,"endColumn":43},{"ruleId":"75","severity":1,"message":"90","line":4,"column":8,"nodeType":"77","messageId":"78","endLine":4,"endColumn":15},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"no-unused-vars","'BarChart' is defined but never used.","Identifier","unusedVar","'StackedAreaChart' is defined but never used.","'data' is defined but never used.",["91"],["92"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'previousSelection' and 'selection'. Either include them or remove the dependency array.","ArrayExpression",["93"],"'useState' is defined but never used.",["91"],["92"],"'GroupBy' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},"Update the dependencies array to be: [data, dateParse, dimensions, previousSelection, selection]",{"range":"96","text":"97"},[6432,6461],"[data, dateParse, dimensions, previousSelection, selection]"]