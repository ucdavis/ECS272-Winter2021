[{"C:\\Users\\pjin2\\ECS272-Winter2021\\Homework2\\Templates\\react-template\\jpung\\src\\index.js":"1","C:\\Users\\pjin2\\ECS272-Winter2021\\Homework2\\Templates\\react-template\\jpung\\src\\App.js":"2","C:\\Users\\pjin2\\ECS272-Winter2021\\Homework2\\Templates\\react-template\\jpung\\src\\reportWebVitals.js":"3","C:\\Users\\pjin2\\ECS272-Winter2021\\Homework2\\Templates\\react-template\\jpung\\src\\ContextView.js":"4","C:\\Users\\pjin2\\ECS272-Winter2021\\Homework2\\Templates\\react-template\\jpung\\src\\FocusView.js":"5"},{"size":517,"mtime":1611655385102,"results":"6","hashOfConfig":"7"},{"size":2637,"mtime":1611863285512,"results":"8","hashOfConfig":"7"},{"size":375,"mtime":1611219246777,"results":"9","hashOfConfig":"7"},{"size":12959,"mtime":1611862107027,"results":"10","hashOfConfig":"7"},{"size":11494,"mtime":1611828858149,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"loo6oj",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"C:\\Users\\pjin2\\ECS272-Winter2021\\Homework2\\Templates\\react-template\\jpung\\src\\index.js",[],["25","26"],"C:\\Users\\pjin2\\ECS272-Winter2021\\Homework2\\Templates\\react-template\\jpung\\src\\App.js",[],"C:\\Users\\pjin2\\ECS272-Winter2021\\Homework2\\Templates\\react-template\\jpung\\src\\reportWebVitals.js",[],"C:\\Users\\pjin2\\ECS272-Winter2021\\Homework2\\Templates\\react-template\\jpung\\src\\ContextView.js",["27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53"],"import React, {Component} from 'react';\r\nimport legend from 'd3-svg-legend';\r\nimport * as d3 from \"d3\";\r\n\r\nclass ContextView extends Component{\r\n\r\n    componentDidMount(){\r\n        this.drawChart();\r\n    }\r\n\r\n    drawChart(){\r\n      d3.csv(this.props.data)\r\n      .then(csv => {      \r\n\r\n        // Preprocessing\r\n        var years = {};\r\n\r\n        csv.forEach(d => {\r\n          var yearMonth = d.ReportPeriod.substr(6,4) + \"/\" + d.ReportPeriod.substr(0,2);\r\n          var pc = parseInt(d.Passenger_Count)\r\n          if(yearMonth in years){\r\n            if (d.Terminal == \"Terminal 1\"){\r\n              years[yearMonth].Terminal_1 += pc;\r\n            } else if(d.Terminal == \"Terminal 2\"){\r\n              years[yearMonth].Terminal_2 += pc;\r\n            } else if(d.Terminal == \"Terminal 3\"){\r\n              years[yearMonth].Terminal_3 += pc;\r\n            } else if(d.Terminal == \"Terminal 4\"){\r\n              years[yearMonth].Terminal_4 += pc;\r\n            } else if(d.Terminal == \"Terminal 5\"){\r\n              years[yearMonth].Terminal_5 += pc;\r\n            } else if(d.Terminal == \"Terminal 6\"){\r\n              years[yearMonth].Terminal_6 += pc;\r\n            } else if(d.Terminal == \"Terminal 7\"){\r\n              years[yearMonth].Terminal_7 += pc;\r\n            } else if(d.Terminal == \"Terminal 8\"){\r\n              years[yearMonth].Terminal_8 += pc;\r\n            } else if(d.Terminal == \"Imperial Terminal\"){\r\n              years[yearMonth].Imperial_Terminal += pc;\r\n            } else if(d.Terminal == \"Misc. Terminal\"){\r\n              years[yearMonth].Misc_Terminal += pc;\r\n            } else if(d.Terminal == \"Tom Bradley International Terminal\"){\r\n              years[yearMonth].TB_Int_Terminal += pc;\r\n            }\r\n          }else{\r\n            var year = {\r\n              Year: yearMonth,\r\n              Terminal_1: 0,\r\n              Terminal_2: 0,\r\n              Terminal_3: 0,\r\n              Terminal_4: 0,\r\n              Terminal_5: 0,\r\n              Terminal_6: 0,\r\n              Terminal_7: 0,\r\n              Terminal_8: 0,\r\n              Imperial_Terminal: 0,\r\n              Misc_Terminal: 0,\r\n              TB_Int_Terminal: 0\r\n            }\r\n            if (d.Terminal == \"Terminal 1\"){\r\n              year.Terminal_1 = pc;\r\n            } else if(d.Terminal == \"Terminal 2\"){\r\n              year.Terminal_2 = pc;\r\n            } else if(d.Terminal == \"Terminal 3\"){\r\n              year.Terminal_3 = pc;\r\n            } else if(d.Terminal == \"Terminal 4\"){\r\n              year.Terminal_4 = pc;\r\n            } else if(d.Terminal == \"Terminal 5\"){\r\n              year.Terminal_5 = pc;\r\n            } else if(d.Terminal == \"Terminal 6\"){\r\n              year.Terminal_6 = pc;\r\n            } else if(d.Terminal == \"Terminal 7\"){\r\n              year.Terminal_7 = pc;\r\n            } else if(d.Terminal == \"Terminal 8\"){\r\n              year.Terminal_8 = pc;\r\n            } else if(d.Terminal == \"Imperial Terminal\"){\r\n              year.Imperial_Terminal = pc;\r\n            } else if(d.Terminal == \"Misc. Terminal\"){\r\n              year.Misc_Terminal = pc;\r\n            } else if(d.Terminal == \"Tom Bradley International Terminal\"){\r\n              year.TB_Int_Terminal = pc;\r\n            }\r\n            years[yearMonth] = year;\r\n          }\r\n        })\r\n\r\n        const chartdata = []\r\n        Object.keys(years).forEach(d => {\r\n          chartdata.push(years[d])\r\n        })\r\n        \r\n        // Sort by year\r\n        chartdata.sort(function(a, b){\r\n            if(a.Year < b.Year) { return -1; }\r\n            if(a.Year > b.Year) { return 1; }\r\n            return 0;\r\n        })        \r\n\r\n        console.log(chartdata);\r\n\r\n        /*****************\r\n         * Define Function\r\n         *****************/\r\n\r\n        function re_rendering(keys, lgd_keys) {\r\n          var series = d3.stack()\r\n          .keys(keys)\r\n          (chartdata).map(d => (d.forEach(v => v.key = d.key), d));\r\n\r\n          console.log(series);\r\n\r\n          /********************************* \r\n          * Repeatitive visualization codes start here\r\n          * ********************************/    \r\n          \r\n          // size of stacked bar\r\n          const height = 250;\r\n          const width = 1000;\r\n\r\n          const color = d3.scaleOrdinal()\r\n          .domain(series.map(d => d.key))\r\n          .range(d3.quantize(t => d3.interpolateSpectral(t * 0.8 + 0.1), series.length).reverse())\r\n          .unknown(\"#ccc\")\r\n\r\n          // Legend\r\n          var svg_l = d3.select(\"#stk_legend\")\r\n            .append(\"svg\")\r\n            .attr(\"viewBox\", [20, 10, 120, 200]);\r\n\r\n          var colorLegend = legend.legendColor()\r\n              .scale(color)\r\n              .labels(lgd_keys);\r\n\r\n          svg_l.append(\"g\")\r\n              .attr(\"class\", \"legend_Color\")\r\n              .style('font-size', 12)\r\n              .style('font-family', 'sans-serif')\r\n              .attr(\"transform\", \"translate(20,20)\");\r\n            \r\n            \r\n          svg_l.select(\".legend_Color\")\r\n              .call(colorLegend);\r\n\r\n          // Stacked bar\r\n          const svg = d3.select(\"#stkBar\")\r\n            .append(\"svg\")\r\n            .attr(\"viewBox\", [-30, 0, width+50, height +30]);\r\n\r\n          const margin = ({top: 10, right: 10, bottom: 20, left: 30})\r\n          \r\n          // Scale\r\n          const x = d3.scaleBand()\r\n            .domain(chartdata.map(d => d.Year))\r\n            .range([30, width - margin.right])\r\n            .padding(0.3)\r\n          const y = d3.scaleLinear()\r\n            .domain([0, d3.max(series, d => d3.max(d, d => d[1]))])\r\n            .rangeRound([height - margin.bottom, margin.top])\r\n          \r\n          // Add bars\r\n          svg.append(\"g\")\r\n            .selectAll(\"g\")\r\n            .data(series)\r\n            .join(\"g\")\r\n              .attr(\"fill\", d => color(d.key))\r\n            .selectAll(\"rect\")\r\n            .data(d => d)\r\n            .join(\"rect\")\r\n              .attr(\"x\", (d, i) => x(d.data.Year))\r\n              .attr(\"y\", d => y(d[1]))\r\n              .attr(\"height\", d => y(d[0]) - y(d[1]))\r\n              .attr(\"width\", x.bandwidth())\r\n        \r\n          // Draw axis\r\n          const xAxis = g => g\r\n            .attr(\"transform\", `translate(0,${height - margin.bottom})`)\r\n            .call(d3.axisBottom(x).tickSizeOuter(0).tickFormat(x => {if (x.substr(5,2) == \"01\") return x.substr(0,4); else return \"\";}))\r\n            .call(g => g.selectAll(\".domain\").remove())\r\n          const yAxis = g => g\r\n            .attr(\"transform\", `translate(${margin.left},0)`)\r\n            .call(d3.axisLeft(y).ticks(null, \"s\"))\r\n            .call(g => g.selectAll(\".domain\").remove())\r\n          \r\n          svg.append(\"g\")\r\n            .call(xAxis);\r\n          svg.append(\"g\")\r\n            .call(yAxis);\r\n          \r\n          // x label\r\n          svg.select(\"g\").append(\"text\")             \r\n            .attr(\"transform\", `translate(${(width/2)}, ${(height + margin.top + 3)})`)\r\n            .style(\"text-anchor\", \"middle\")\r\n            .style(\"font-family\", \"sans-serif\")\r\n            .text(\"Year\");\r\n\r\n          // y label\r\n          svg.select(\"g\").append(\"text\")\r\n            .attr(\"transform\", \"rotate(-90)\")\r\n            .attr(\"y\", 0 - margin.left -20)\r\n            .attr(\"x\", 0 - (height / 2))\r\n            .attr(\"dy\", \"3em\")\r\n            .style(\"text-anchor\", \"middle\")\r\n            .text(\"Passenger Count\");\r\n          \r\n          // Title\r\n          svg.append(\"text\")\r\n            .attr(\"transform\", `translate(${(width + margin.left + margin.right)/2},20)`)\r\n            .style(\"text-anchor\", \"middle\")\r\n            .style(\"font-weight\", 700)\r\n            .text(\"LAX passenger traffic over years\");\r\n          }\r\n\r\n        /***********\r\n         * On check\r\n         **********/\r\n        \r\n        // Get values from checkboxes\r\n        d3.selectAll(\"input[name='terminal']\").on(\"click\", function() {\r\n          d3.selectAll(\"svg\").remove();\r\n\r\n          var keys = [];\r\n          var lgd_keys = [];\r\n          var check_count = document.getElementsByName(\"terminal\").length;\r\n  \r\n          for (var i=0; i<check_count; i++) {\r\n              if (document.getElementsByName(\"terminal\")[i].checked == true) {\r\n                  keys.push(document.getElementsByName(\"terminal\")[i].value);\r\n                  lgd_keys.push(document.getElementsByName(\"terminal\")[i].value.replace(/_/gi,\" \"));\r\n              }\r\n          }\r\n\r\n          keys.sort(function(a, b){\r\n            if(a.Year < b.Year) { return -1; }\r\n            if(a.Year > b.Year) { return 1; }\r\n            return 0;\r\n          })        \r\n          console.log(keys);\r\n\r\n          // Re-render context view\r\n          re_rendering(keys, lgd_keys);\r\n\r\n          //end of onChange\r\n        })\r\n\r\n        console.log(chartdata);\r\n\r\n        /********************************* \r\n        * Initial visualization codes start here\r\n        * ********************************/  \r\n       \r\n        var series = d3.stack()\r\n        .keys([\"Terminal_1\", \"Terminal_2\", \"Terminal_3\", \r\n        \"Terminal_4\", \"Terminal_5\", \"Terminal_6\", \r\n        \"Terminal_7\", \"Terminal_8\", \"Imperial_Terminal\", \r\n        \"Misc_Terminal\", \"TB_Int_Terminal\"])\r\n        (chartdata).map(d => (d.forEach(v => v.key = d.key), d));\r\n\r\n        console.log(series);\r\n        \r\n        // size of stacked bar\r\n        const height = 250;\r\n        const width = 1000;\r\n\r\n        const color = d3.scaleOrdinal()\r\n        .domain(series.map(d => d.key))\r\n        .range(d3.quantize(t => d3.interpolateSpectral(t * 0.8 + 0.1), series.length).reverse())\r\n        .unknown(\"#ccc\")\r\n\r\n        // Legend\r\n        var svg_l = d3.select(\"#stk_legend\")\r\n          .append(\"svg\")\r\n          .attr(\"viewBox\", [20, 10, 120, 200]);\r\n\r\n        var colorLegend = legend.legendColor()\r\n            .scale(color)\r\n            .labels([\"Terminal 1\", \"Terminal 2\", \"Terminal 3\", \r\n            \"Terminal 4\", \"Terminal 5\", \"Terminal 6\", \r\n            \"Terminal 7\", \"Terminal 8\", \"Imperial Terminal\", \r\n            \"Misc Terminal\", \"TB Int Terminal\"]);\r\n\r\n        svg_l.append(\"g\")\r\n            .attr(\"class\", \"legend_Color\")\r\n            .style('font-size', 12)\r\n            .style('font-family', 'sans-serif')\r\n            .attr(\"transform\", \"translate(20,20)\");\r\n          \r\n          \r\n        svg_l.select(\".legend_Color\")\r\n            .call(colorLegend);\r\n\r\n        // Stacked bar\r\n        const svg = d3.select(\"#stkBar\")\r\n          .append(\"svg\")\r\n          .attr(\"viewBox\", [-30, 0, width+50, height +30]);\r\n\r\n        const margin = ({top: 10, right: 10, bottom: 20, left: 30})\r\n        \r\n        // Scale\r\n        const x = d3.scaleBand()\r\n          .domain(chartdata.map(d => d.Year))\r\n          .range([30, width - margin.right])\r\n          .padding(0.3)\r\n        const y = d3.scaleLinear()\r\n          .domain([0, d3.max(series, d => d3.max(d, d => d[1]))])\r\n          .rangeRound([height - margin.bottom, margin.top])\r\n        \r\n        // Add bars\r\n        svg.append(\"g\")\r\n          .selectAll(\"g\")\r\n          .data(series)\r\n          .join(\"g\")\r\n            .attr(\"fill\", d => color(d.key))\r\n          .selectAll(\"rect\")\r\n          .data(d => d)\r\n          .join(\"rect\")\r\n            .attr(\"x\", (d, i) => x(d.data.Year))\r\n            .attr(\"y\", d => y(d[1]))\r\n            .attr(\"height\", d => y(d[0]) - y(d[1]))\r\n            .attr(\"width\", x.bandwidth())\r\n      \r\n        // Draw axis\r\n        const xAxis = g => g\r\n          .attr(\"transform\", `translate(0,${height - margin.bottom})`)\r\n          .call(d3.axisBottom(x).tickSizeOuter(0).tickFormat(x => {if (x.substr(5,2) == \"01\") return x.substr(0,4); else return \"\";}))\r\n          .call(g => g.selectAll(\".domain\").remove())\r\n        const yAxis = g => g\r\n          .attr(\"transform\", `translate(${margin.left},0)`)\r\n          .call(d3.axisLeft(y).ticks(null, \"s\"))\r\n          .call(g => g.selectAll(\".domain\").remove())\r\n        \r\n        svg.append(\"g\")\r\n          .call(xAxis);\r\n        svg.append(\"g\")\r\n          .call(yAxis);\r\n        \r\n        // x label\r\n        svg.select(\"g\").append(\"text\")             \r\n          .attr(\"transform\", `translate(${(width/2)}, ${(height + margin.top + 3)})`)\r\n          .style(\"text-anchor\", \"middle\")\r\n          .style(\"font-family\", \"sans-serif\")\r\n          .text(\"Year\");\r\n\r\n        // y label\r\n        svg.select(\"g\").append(\"text\")\r\n          .attr(\"transform\", \"rotate(-90)\")\r\n          .attr(\"y\", 0 - margin.left -20)\r\n          .attr(\"x\", 0 - (height / 2))\r\n          .attr(\"dy\", \"3em\")\r\n          .style(\"text-anchor\", \"middle\")\r\n          .text(\"Passenger Count\");\r\n        \r\n        // Title\r\n        svg.append(\"text\")\r\n          .attr(\"transform\", `translate(${(width + margin.left + margin.right)/2},20)`)\r\n          .style(\"text-anchor\", \"middle\")\r\n          .style(\"font-weight\", 700)\r\n          .text(\"LAX passenger traffic over years\");\r\n\r\n        //end of main function\r\n     });\r\n\r\n    }\r\n\r\n    render(){\r\n        return <div id={\"#\" + this.props.id}></div>\r\n    }\r\n}\r\n\r\nexport default ContextView;","C:\\Users\\pjin2\\ECS272-Winter2021\\Homework2\\Templates\\react-template\\jpung\\src\\FocusView.js",["54","55","56","57","58"],"import React, {Component} from 'react';\r\nimport legend from 'd3-svg-legend';\r\nimport * as d3 from \"d3\";\r\n\r\nclass FocusView extends Component{\r\n\r\n    componentDidMount(){\r\n        this.drawChart();\r\n    }\r\n\r\n    drawChart(){\r\n        d3.csv(this.props.data)\r\n        .then(csv => {\r\n        \r\n        /********************************* \r\n        * Visualization codes start here\r\n        * ********************************/\r\n        \r\n        const groupKey = \"Year\";\r\n        const keys = [\"Arrival\", \"Departure\", \"Domestic\", \"International\"];\r\n        const margin = ({top: 10, right: 10, bottom: 20, left: 40});\r\n        const height = 300;\r\n        const width = 500;\r\n\r\n        // Select terminal\r\n        var select = d3.select(\"#selectTerminal\")\r\n          .append(\"select\")\r\n          .on(\"change\", changeTerminal);\r\n\r\n        var options = select.selectAll('option')\r\n          .data([\"Terminal 1\", \"Terminal 2\", \"Terminal 3\", \r\n          \"Terminal 4\", \"Terminal 5\", \"Terminal 6\", \r\n          \"Terminal 7\", \"Terminal 8\", \"Imperial Terminal\", \r\n          \"Misc. Terminal\", \"Tom Bradley International Terminal\"]);\r\n\r\n        options\r\n          .enter()\r\n          .append(\"option\")\r\n          .attr(\"value\", function(d) {return d;})\r\n          .text(function(d) {return d;});\r\n\r\n        // Define action on change\r\n        function changeTerminal() {\r\n          // Remove existing chart\r\n          d3.select(\"#groupBar\").selectAll(\"svg\").remove();\r\n          d3.select(\"#radarChart\").selectAll(\"svg\").remove();\r\n          \r\n          // Preprocessing \r\n          var years = {};\r\n          \r\n          csv.forEach(d => {\r\n            if (d.Terminal == this.value) {\r\n              var year = d.ReportPeriod.substr(6,4);\r\n              var pc = parseInt(d.Passenger_Count)\r\n              if(year in years){\r\n                if (d.Arrival_Departure == \"Arrival\"){\r\n                  years[year].Arrival += pc;\r\n                } else {\r\n                  years[year].Departure += pc;\r\n                }\r\n                if (d.Domestic_International == \"Domestic\"){\r\n                  years[year].Domestic += pc;\r\n                } else {\r\n                  years[year].International += pc;\r\n                }\r\n              }else{\r\n                var Year = {\r\n                  Year: year,\r\n                  Arrival: 0,\r\n                  Departure: 0,\r\n                  Domestic: 0,\r\n                  International: 0,\r\n                }\r\n                if (d.Arrival_Departure == \"Arrival\"){\r\n                  Year.Arrival += pc;\r\n                } else {\r\n                  Year.Departure += pc;\r\n                }\r\n                if (d.Domestic_International == \"Domestic\"){\r\n                  Year.Domestic += pc;\r\n                } else {\r\n                  Year.International += pc;\r\n                }\r\n                years[year] = Year;\r\n              }\r\n            }\r\n          });\r\n\r\n          const chartdata = []\r\n          Object.keys(years).forEach(d => {\r\n            chartdata.push(years[d])\r\n          })\r\n          \r\n          // Sort by year\r\n          chartdata.sort(function(a, b){\r\n              if(a.Year < b.Year) { return -1; }\r\n              if(a.Year > b.Year) { return 1; }\r\n              return 0;\r\n          })        \r\n\r\n          var x0 = d3.scaleBand()\r\n            .domain(chartdata.map(d => d[groupKey]))\r\n            .rangeRound([margin.left, width - margin.right])\r\n            .paddingInner(0.1);\r\n  \r\n          var x1 = d3.scaleBand()\r\n            .domain(keys)\r\n            .rangeRound([0, x0.bandwidth()])\r\n            .padding(0.05);\r\n  \r\n          var y = d3.scaleLinear()\r\n            .domain([0, d3.max(chartdata, d => d3.max(keys, key => d[key]))]).nice()\r\n            .rangeRound([height - margin.bottom, margin.top]);\r\n  \r\n          const color = d3.scaleOrdinal()\r\n            .range([\"#ff9999\", \"#505050\",\"#00cc66\", \"#00BFFF\"]);\r\n          \r\n          var xAxis = g => g\r\n            .attr(\"transform\", `translate(0,${height - margin.bottom})`)\r\n            .call(d3.axisBottom(x0).tickSizeOuter(0))\r\n            .call(g => g.select(\".domain\").remove())\r\n  \r\n          var yAxis = g => g\r\n            .attr(\"transform\", `translate(${margin.left},0)`)\r\n            .call(d3.axisLeft(y).ticks(null, \"s\"))\r\n            .call(g => g.select(\".domain\").remove())\r\n            .call(g => g.select(\".tick:last-of-type text\").clone()\r\n                .attr(\"x\", 3)\r\n                .attr(\"text-anchor\", \"start\")\r\n                .attr(\"font-weight\", \"bold\")\r\n                .text(chartdata.y))\r\n\r\n          // Draw group bar\r\n          var svg = d3.select(\"#groupBar\")\r\n            .append(\"svg\")\r\n            .attr(\"viewBox\", [-10, -10, width + 25, height + 25]);\r\n\r\n          svg.append(\"g\")\r\n            .selectAll(\"g\")\r\n            .data(chartdata)\r\n            .join(\"g\")\r\n              .attr(\"transform\", d => `translate(${x0(d[groupKey])},0)`)\r\n            .selectAll(\"rect\")\r\n            .data(d => keys.map(key => ({key, value: d[key]})))\r\n            .join(\"rect\")\r\n              .attr(\"x\", d => x1(d.key))\r\n              .attr(\"y\", d => y(d.value))\r\n              .attr(\"width\", x1.bandwidth())\r\n              .attr(\"height\", d => y(0) - y(d.value))\r\n              .attr(\"fill\", d => color(d.key));\r\n\r\n          svg.append(\"g\")\r\n              .call(xAxis);\r\n\r\n          svg.append(\"g\")\r\n              .call(yAxis);\r\n\r\n          // x label\r\n          svg.select(\"g\").append(\"text\")             \r\n            .attr(\"transform\", `translate(${(width/2)}, ${(height + margin.top+5)})`)\r\n            .style(\"text-anchor\", \"middle\")\r\n            .style(\"font-family\", \"sans-serif\")\r\n            .text(\"Year\");\r\n\r\n          // y label\r\n          svg.select(\"g\").append(\"text\")\r\n            .attr(\"transform\", \"rotate(-90)\")\r\n            .attr(\"y\", 0 - margin.left +27)\r\n            .attr(\"x\", 0 - (height / 2))\r\n            .attr(\"dy\", \"1em\")\r\n            .style(\"text-anchor\", \"middle\")\r\n            .text(\"Passenger Count\");\r\n              \r\n          // Legend\r\n          var svg_l = d3.select(\"#groupBar\")\r\n            .append(\"svg\")\r\n            .attr(\"viewBox\", [0, 8, 100, 200]);\r\n\r\n          var colorLegend = legend.legendColor()\r\n              .scale(color)\r\n              .shapeWidth(2.5)\r\n              .shapeHeight(2.5)\r\n              .labels([\"Arrival\", \"Departure\", \"Domestic\", \"International\"])\r\n              .orient(\"horizontal\")\r\n              .shapePadding(20);\r\n\r\n\r\n          svg_l.append(\"g\")\r\n              .attr(\"class\", \"legend_Color\")\r\n              .style('font-size', 2)\r\n              .style('font-family', 'sans-serif')\r\n              .attr(\"transform\", \"translate(10,10)\");\r\n                     \r\n          svg_l.select(\".legend_Color\")\r\n              .call(colorLegend); \r\n\r\n          svg_l.selectAll(\"g\").selectAll(\"g\").selectAll(\"g\")\r\n              .selectAll(\"text\")\r\n              .attr(\"transform\", \"translate(9.5, 2)\");\r\n          \r\n          /*****************************\r\n           * Start drawing Radar chart \r\n           ****************************/\r\n\r\n          // Preprocess data\r\n          var cumData = {\r\n            Arrival: 0,\r\n            Departure: 0,\r\n            Domestic: 0,\r\n            International: 0\r\n          };\r\n\r\n          chartdata.forEach(d => {\r\n            cumData.Arrival += d.Arrival;\r\n            cumData.Departure += d.Departure;\r\n            cumData.Domestic += d.Domestic;\r\n            cumData.International += d.International;\r\n          });\r\n\r\n          // Get maximum # of passenger for scaling\r\n          const maxCnt = Math.max(cumData.Arrival, cumData.Departure, cumData.Domestic, cumData.International);\r\n\r\n          // Radius of radar chart\r\n          const r = 100;\r\n          const r_margin = { left: 30, top: 30, right: 30, bottom: 30 };\r\n\r\n          // Create svg\r\n          const r_svg = d3.select(\"#radarChart\")\r\n            .append(\"svg\")\r\n            .attr('viewBox',\r\n              `-${r_margin.left},\r\n              -${r_margin.top},\r\n              ${r * 2 + r_margin.left + r_margin.right},\r\n              ${r * 2 + r_margin.bottom + r_margin.top}`)\r\n          \r\n          const dimensions = ['Arrival', 'Departure', 'Domestic', 'International']\r\n          \r\n          // Line generator for radial lines\r\n          const radialLine = d3.lineRadial()\r\n          \r\n          // Radar chart is a circle, the length of each axis is the radius of the circle\r\n          // Mapping 0 - maxCnt to 0 - r\r\n          const yScale = d3.scaleLinear()\r\n            .range([0, r])\r\n            .domain([0, maxCnt])\r\n          \r\n          // Tick marks\r\n          var tickUnit = maxCnt / 5;\r\n          const ticks = [tickUnit, tickUnit*2, tickUnit*3, tickUnit*4, tickUnit*5];\r\n\r\n          // One axis for each dimension\r\n          dimensions.forEach((dimension, i) => {\r\n            // First build an axis at the origin, enclosed inside an \"g\" element\r\n            // then transform it to the right position and right orientation\r\n            const g = r_svg.append('g')\r\n              .attr('transform', `translate(${r}, ${r}) rotate(${i * 90})`)\r\n\r\n            // Combining a left oriented axis with a right oriented axis\r\n            // to make an axis with tick marks on both side\r\n            // Reminded that, these are \"g\" elements inside the outer \"g\" element\r\n            // and will be transformed to the right position with its parent element\r\n            g.append('g')\r\n              .call(d3.axisLeft(yScale).tickFormat('').tickValues(ticks))\r\n            g.append('g')\r\n              .call(d3.axisRight(yScale).tickFormat('').tickValues(ticks))\r\n\r\n            // Add a text label for each axis, put it at the edge\r\n            // Again, this \"text\" element is inside the outer \"g\" element,\r\n            // and will be transformed to the right position with its parent element\r\n            g.append('text')\r\n              .text(dimension)\r\n              .attr('text-anchor', 'middle')\r\n              .attr('transform', `translate(0, -${r + 10})`)\r\n          })\r\n          \r\n          // Line for the cumulative passenger count\r\n          r_svg.append('g')\r\n            .selectAll('path')\r\n            .data([cumData])\r\n            .enter()\r\n            .append('path')\r\n              .attr('d', d =>\r\n                radialLine([\r\n                  d.Arrival,\r\n                  d.Departure,\r\n                  d.Domestic,\r\n                  d.International,\r\n                  d.Arrival // Arrival again to close the loop\r\n                ].map((v, i) => [Math.PI * 2 * i / 4 /* radian */, yScale(v) /* distance from the origin */])) \r\n              )\r\n              // Move to the center\r\n              .attr('transform', `translate(${r}, ${r})`)\r\n              .attr('stroke', 'SteelBlue')\r\n              .attr('stroke-width', 5)\r\n              .attr('fill', 'rgba(70, 130, 180, 0.3)')\r\n          \r\n          var _ = require('lodash');\r\n\r\n          // Gird lines for references\r\n          r_svg.append('g')\r\n            .selectAll('path')\r\n            .data(ticks)\r\n            .enter()\r\n            .append('path')\r\n              .attr('d', d => radialLine(_.range(5).map((v, i) => [Math.PI * 2 * i / 4, yScale(d)])))\r\n              .attr('transform', `translate(${r}, ${r})`)\r\n              .attr('stroke', 'grey')\r\n              .attr('opacity', 0.5)\r\n              .attr('fill', 'none')\r\n        }\r\n        \r\n     });\r\n\r\n    }\r\n\r\n    render(){\r\n        return <div id={\"#\" + this.props.id}></div>\r\n    }\r\n}\r\n\r\nexport default FocusView;",{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":22,"column":28,"nodeType":"65","messageId":"66","endLine":22,"endColumn":30},{"ruleId":"63","severity":1,"message":"64","line":24,"column":34,"nodeType":"65","messageId":"66","endLine":24,"endColumn":36},{"ruleId":"63","severity":1,"message":"64","line":26,"column":34,"nodeType":"65","messageId":"66","endLine":26,"endColumn":36},{"ruleId":"63","severity":1,"message":"64","line":28,"column":34,"nodeType":"65","messageId":"66","endLine":28,"endColumn":36},{"ruleId":"63","severity":1,"message":"64","line":30,"column":34,"nodeType":"65","messageId":"66","endLine":30,"endColumn":36},{"ruleId":"63","severity":1,"message":"64","line":32,"column":34,"nodeType":"65","messageId":"66","endLine":32,"endColumn":36},{"ruleId":"63","severity":1,"message":"64","line":34,"column":34,"nodeType":"65","messageId":"66","endLine":34,"endColumn":36},{"ruleId":"63","severity":1,"message":"64","line":36,"column":34,"nodeType":"65","messageId":"66","endLine":36,"endColumn":36},{"ruleId":"63","severity":1,"message":"64","line":38,"column":34,"nodeType":"65","messageId":"66","endLine":38,"endColumn":36},{"ruleId":"63","severity":1,"message":"64","line":40,"column":34,"nodeType":"65","messageId":"66","endLine":40,"endColumn":36},{"ruleId":"63","severity":1,"message":"64","line":42,"column":34,"nodeType":"65","messageId":"66","endLine":42,"endColumn":36},{"ruleId":"63","severity":1,"message":"64","line":60,"column":28,"nodeType":"65","messageId":"66","endLine":60,"endColumn":30},{"ruleId":"63","severity":1,"message":"64","line":62,"column":34,"nodeType":"65","messageId":"66","endLine":62,"endColumn":36},{"ruleId":"63","severity":1,"message":"64","line":64,"column":34,"nodeType":"65","messageId":"66","endLine":64,"endColumn":36},{"ruleId":"63","severity":1,"message":"64","line":66,"column":34,"nodeType":"65","messageId":"66","endLine":66,"endColumn":36},{"ruleId":"63","severity":1,"message":"64","line":68,"column":34,"nodeType":"65","messageId":"66","endLine":68,"endColumn":36},{"ruleId":"63","severity":1,"message":"64","line":70,"column":34,"nodeType":"65","messageId":"66","endLine":70,"endColumn":36},{"ruleId":"63","severity":1,"message":"64","line":72,"column":34,"nodeType":"65","messageId":"66","endLine":72,"endColumn":36},{"ruleId":"63","severity":1,"message":"64","line":74,"column":34,"nodeType":"65","messageId":"66","endLine":74,"endColumn":36},{"ruleId":"63","severity":1,"message":"64","line":76,"column":34,"nodeType":"65","messageId":"66","endLine":76,"endColumn":36},{"ruleId":"63","severity":1,"message":"64","line":78,"column":34,"nodeType":"65","messageId":"66","endLine":78,"endColumn":36},{"ruleId":"63","severity":1,"message":"64","line":80,"column":34,"nodeType":"65","messageId":"66","endLine":80,"endColumn":36},{"ruleId":"67","severity":1,"message":"68","line":108,"column":62,"nodeType":"69","messageId":"70","endLine":108,"endColumn":63},{"ruleId":"63","severity":1,"message":"64","line":177,"column":88,"nodeType":"65","messageId":"66","endLine":177,"endColumn":90},{"ruleId":"63","severity":1,"message":"64","line":226,"column":69,"nodeType":"65","messageId":"66","endLine":226,"endColumn":71},{"ruleId":"67","severity":1,"message":"68","line":256,"column":60,"nodeType":"69","messageId":"70","endLine":256,"endColumn":61},{"ruleId":"63","severity":1,"message":"64","line":324,"column":86,"nodeType":"65","messageId":"66","endLine":324,"endColumn":88},{"ruleId":"63","severity":1,"message":"64","line":52,"column":28,"nodeType":"65","messageId":"66","endLine":52,"endColumn":30},{"ruleId":"63","severity":1,"message":"64","line":56,"column":41,"nodeType":"65","messageId":"66","endLine":56,"endColumn":43},{"ruleId":"63","severity":1,"message":"64","line":61,"column":46,"nodeType":"65","messageId":"66","endLine":61,"endColumn":48},{"ruleId":"63","severity":1,"message":"64","line":74,"column":41,"nodeType":"65","messageId":"66","endLine":74,"endColumn":43},{"ruleId":"63","severity":1,"message":"64","line":79,"column":46,"nodeType":"65","messageId":"66","endLine":79,"endColumn":48},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-global-assign","no-unsafe-negation"]