[{"/Users/hx/Desktop/ECS272-Winter2021/Homework2/Templates/react-template/react-d3/src/index.js":"1","/Users/hx/Desktop/ECS272-Winter2021/Homework2/Templates/react-template/react-d3/src/reportWebVitals.js":"2","/Users/hx/Desktop/ECS272-Winter2021/Homework2/Templates/react-template/react-d3/src/App.js":"3","/Users/hx/Desktop/ECS272-Winter2021/Homework2/Templates/react-template/react-d3/src/BarChart.js":"4","/Users/hx/Desktop/ECS272-Winter2021/Homework2/hahliu/react-template/react-d3/src/index.js":"5","/Users/hx/Desktop/ECS272-Winter2021/Homework2/hahliu/react-template/react-d3/src/App.js":"6","/Users/hx/Desktop/ECS272-Winter2021/Homework2/hahliu/react-template/react-d3/src/reportWebVitals.js":"7","/Users/hx/Desktop/ECS272-Winter2021/Homework2/hahliu/react-template/react-d3/src/DonutChart.js":"8","/Users/hx/Desktop/ECS272-Winter2021/Homework2/hahliu/react-template/react-d3/src/BarChart2.js":"9","/Users/hx/Desktop/ECS272-Winter2021/Homework2/hahliu/react-template/react-d3/src/AdvancedChart.js":"10","/Users/hx/Desktop/hahliu/react-template/react-d3/src/index.js":"11","/Users/hx/Desktop/hahliu/react-template/react-d3/src/reportWebVitals.js":"12","/Users/hx/Desktop/hahliu/react-template/react-d3/src/App.js":"13","/Users/hx/Desktop/hahliu/react-template/react-d3/src/BarChart2.js":"14","/Users/hx/Desktop/hahliu/react-template/react-d3/src/AdvancedChart.js":"15","/Users/hx/Desktop/hahliu/react-template/react-d3/src/DonutChart.js":"16"},{"size":500,"mtime":1611123824295,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1611123824295,"results":"19","hashOfConfig":"18"},{"size":616,"mtime":1611123824293,"results":"20","hashOfConfig":"18"},{"size":2969,"mtime":1611123824294,"results":"21","hashOfConfig":"18"},{"size":500,"mtime":1611123824295,"results":"22","hashOfConfig":"23"},{"size":1046,"mtime":1612374094849,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":1611123824295,"results":"25","hashOfConfig":"23"},{"size":6263,"mtime":1612376074386,"results":"26","hashOfConfig":"23"},{"size":4940,"mtime":1612374942555,"results":"27","hashOfConfig":"23"},{"size":6356,"mtime":1612374031308,"results":"28","hashOfConfig":"23"},{"size":500,"mtime":1611123824295,"results":"29","hashOfConfig":"30"},{"size":362,"mtime":1611123824295,"results":"31","hashOfConfig":"30"},{"size":1046,"mtime":1612374094849,"results":"32","hashOfConfig":"30"},{"size":6837,"mtime":1613302310341,"results":"33","hashOfConfig":"30"},{"size":6749,"mtime":1613297704802,"results":"34","hashOfConfig":"30"},{"size":7502,"mtime":1613302158586,"results":"35","hashOfConfig":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jv1rjx",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"xsksd8",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},"rcvolk",{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"63"},"/Users/hx/Desktop/ECS272-Winter2021/Homework2/Templates/react-template/react-d3/src/index.js",[],"/Users/hx/Desktop/ECS272-Winter2021/Homework2/Templates/react-template/react-d3/src/reportWebVitals.js",[],"/Users/hx/Desktop/ECS272-Winter2021/Homework2/Templates/react-template/react-d3/src/App.js",[],"/Users/hx/Desktop/ECS272-Winter2021/Homework2/Templates/react-template/react-d3/src/BarChart.js",[],"/Users/hx/Desktop/ECS272-Winter2021/Homework2/hahliu/react-template/react-d3/src/index.js",[],["75","76"],"/Users/hx/Desktop/ECS272-Winter2021/Homework2/hahliu/react-template/react-d3/src/App.js",[],"/Users/hx/Desktop/ECS272-Winter2021/Homework2/hahliu/react-template/react-d3/src/reportWebVitals.js",[],"/Users/hx/Desktop/ECS272-Winter2021/Homework2/hahliu/react-template/react-d3/src/DonutChart.js",["77"],"import React, { Component } from 'react';\nimport * as d3 from \"d3\";\n\nclass DonutChart extends Component {\n\n    componentDidMount() {\n        this.drawChart();\n    }\n\n    drawChart() {\n        d3.csv(this.props.data)\n            .then(csv => {\n                // log csv in browser console\n\n                // create data by selecting category column from csv \n                var data = csv.map(row => {\n                    return {\n                        category: row['Category']\n                    }\n                })\n\n                //process the data for chart\n                var countObj = [];\n                for (var i = 0; i < data.length; i++) {\n                    if (!countObj[data[i].category]) {\n                        countObj[data[i].category] = 0;\n                    }\n                    countObj[data[i].category]++;\n                }\n\n                var indexArr = Object.keys(countObj);\n                var countArray = Object.values(countObj);\n                var countArr = Object.entries(countObj);\n             \n\n                const dataMap = [];\n                for (var j = 0; j < countArr.length; j++) {\n                    var obj = {\n                        key: countArr[j][0],\n                        value: countArr[j][1]\n                    }\n                    dataMap.push(obj);\n                }\n\n                // Visualization codes start here\n\n                // set the dimensions and margins of the graph\n                var width = 600\n                var height = 600\n                var margin = 100\n\n                // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\n\n                var radius = Math.min(width, height) / 2 - margin\n\n                // append the svg object to the div called 'my_dataviz'\n                var svg = d3.select('#container')\n                    .append(\"svg\")\n                    .attr(\"width\", width)\n                    .attr(\"height\", height)\n                    .append(\"g\")\n                    .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\n\n\n                // set the color scale\n                var color = d3.scaleOrdinal()\n                    .domain(indexArr)\n                    .range(d3.schemeDark2);\n\n\n                // Compute the position of each group on the pie:\n                var pie = d3.pie()\n                    .sort(null) // Do not sort group by size  \n                    .value(function (d) { return d.value; })\n                var data_ready = pie(dataMap);\n       \n\n                // The arc generator\n\n                var arc = d3.arc()\n                    .innerRadius(radius * 0.5)         // This is the size of the donut hole \n                    .outerRadius(radius * 0.8)\n\n                // Another arc that won't be drawn. Just for labels positioning\n\n                var outerArc = d3.arc()\n                    .innerRadius(radius * 0.9)\n                    .outerRadius(radius * 0.9)\n\n                // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n\n                var donutplot = svg\n                    .selectAll('allSlices')\n                    .data(data_ready)\n                    .enter()\n                    .append('path')\n                    .attr('d', arc)\n                    .attr('fill', function (d) { return (color(d.data.key)) })\n                    .attr(\"stroke\", \"white\")\n                    .style(\"stroke-width\", \"2px\")\n                    .style(\"opacity\", 0.7)\n\n\n                svg\n                    .selectAll('allPolylines')\n                    .data(data_ready)\n                    .enter()\n                    .append('polyline')\n                    .attr(\"stroke\", \"black\")\n                    .style(\"fill\", \"none\")\n                    .attr(\"stroke-width\", 0.5)\n                    .attr('points', function (d) {\n                        var posA = arc.centroid(d) // line insertion in the slice\n                        var posB = outerArc.centroid(d) // line break: we use the other arc generator that has been built only for that\n                        var posC = outerArc.centroid(d); // Label position = almost the same as posB\n                        var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2 // we need the angle to see if the X position will be at the extreme right or extreme left\n                        posC[0] = radius * 0.95 * (midangle < Math.PI ? 1 : -1); // multiply by 1 or -1 to put it on the right or on the left\n                        return [posA, posB, posC]\n                    })\n\n                svg\n                    .selectAll('allLabels')\n                    .data(data_ready)\n                    .enter()\n                    .append('text')\n                    .text(function (d) { console.log(d.data.key); return d.data.key })\n                    .attr('transform', function (d) {\n                        var pos = outerArc.centroid(d);\n                        var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2\n                        pos[0] = radius * 0.99 * (midangle < Math.PI ? 1 : -1);\n                        return 'translate(' + pos + ')';\n                    })\n                    .style('font-size', '10px')\n                    .style('text-anchor', function (d) {\n                        var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2\n                        return (midangle < Math.PI ? 'start' : 'end')\n                    })\n\n                var tooltip = document.getElementById('tooltip')\n                donutplot\n                    .on('mouseenter', function (d) {\n                        d3.select(this).style('fill', 'red')\n                        tooltip.innerHTML = 'In 2016, there is '+ (d3.select(this).data()[0].value) + 'of '+ (d3.select(this).data()[0].key) + ' Incidences.'\n                    }) \n                    .on('mouseleave', function (d) {\n                        var colorOri = color((d3.select(this).data()[0].key));\n                        d3.select(this).style('fill', colorOri)\n                    })\n\n\n            });\n\n    }\n\n    render() {\n        return <div id={\"#\" + this.props.id}></div>\n    }\n}\n\nexport default DonutChart;","/Users/hx/Desktop/ECS272-Winter2021/Homework2/hahliu/react-template/react-d3/src/BarChart2.js",["78"],"import React, { Component } from 'react';\nimport * as d3 from \"d3\";\n\nclass BarChart2 extends Component {\n\n    componentDidMount() {\n        this.drawChart();\n    }\n\n    drawChart() {\n        d3.csv(this.props.data)\n            .then(csv => {\n                // log csv in browser console\n                console.log(csv);\n\n                // create data by selecting one column from csv \n                var data = csv.map(row => {\n                    return {\n                        day: row['DayOfWeek']\n                    }\n                })\n\n                //processing the data for chart\n                var countObj = [];\n                for (var i = 0; i < data.length; i++) {\n                    if (!countObj[data[i].day]) {\n                        countObj[data[i].day] = 0;\n                    }\n                    countObj[data[i].day]++;\n                }\n\n                var countArr = Object.entries(countObj);\n                var dataMap = [];\n                for (var j = 0; j < countArr.length; j++) {\n                    var obj = {\n                        key: countArr[j][0],\n                        value: countArr[j][1]\n                    }\n                    dataMap.push(obj);\n                }\n\n               \n                /********************************* \n               * Visualization codes start here\n               * ********************************/\n                var width = 600;\n                var height = 400;\n                var margin = { left: 60, right: 20, top: 20, bottom: 60 }\n\n                var svg = d3.select('#container')\n                    .append('svg')\n                    .attr('width', width + margin.left + margin.right)\n                    .attr('height', height + margin.top + margin.bottom)\n\n                var view = svg.append(\"g\")\n                    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n                \n                const x = d3.scaleBand()\n                    .domain(dataMap.map(d => d.key))\n                    .rangeRound([margin.left, width])\n                    .padding(0.1);\n                const y = d3.scaleLinear()\n                    .domain([d3.max(dataMap, d => d.value), 0])\n                    .range([margin.top, height - margin.bottom]);\n                var barPlot = svg.selectAll(\"rect\")\n                        .data(dataMap)\n                        .join(\"rect\")\n                        .attr('x', (d) => x(d.key))\n                        .attr('y', (d) => y(d.value))\n                        .attr(\"height\", (d) => 400 - y(d.value) - margin.bottom)\n                        .attr(\"width\", x.bandwidth())\n                        .attr(\"fill\", \"green\");\n\n                const xAxis = g => g\n                     .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n                     .call(d3.axisBottom(x))\n\n                var tooltip = document.getElementById('tooltip')\n                barPlot\n                    .on('mouseenter', function (d) {\n                        d3.select(this).style('fill', 'red')\n                        tooltip.innerHTML = (d3.select(this).data()[0].key) + ' has ' + (d3.select(this).data()[0].value) + ' crimes.'\n                    })\n                    .on('mouseleave', function (d) {\n                        d3.select(this).style('fill', 'green')\n                    })\n\n                  // initialize the location of the Y axis\n                    const yAxis = g => g\n                        .attr(\"transform\", `translate(${margin.left},0)`)\n                        .call(d3.axisLeft(y))\n  \n                      svg.append(\"g\")\n                        .call(xAxis)\n                        .call(g =>\n                            g.select(\".tick:last-of-type text\")\n                                .clone()\n                                .attr(\"text-anchor\", \"middle\")\n                                .attr(\"x\", -(width - margin.left - margin.right) / 2)\n                                .attr(\"y\", margin.bottom - 10)\n                                .attr(\"font-weight\", \"bold\")\n                                .text(\"Day of a Week\")\n                        );\n\n                    svg.append(\"g\")\n                        .call(yAxis)\n                        .call(g =>\n                            g.select(\".tick:last-of-type text\")\n                                .clone()\n                                .attr(\"text-anchor\", \"middle\")\n                                .attr(\"transform\", \"rotate(-90)\")\n                                .attr(\"x\",  height / 2)\n                                .attr(\"y\", - margin.left)\n                                .attr(\"dy\", \"0.71em\")\n                                .attr(\"font-weight\", \"bold\")\n                                .text(\"Number of Crimes\")\n                        );\n\n\n            });\n\n    }\n\n    render() {\n        return <div id={\"#\" + this.props.id}></div>\n    }\n}\n\nexport default BarChart2;","/Users/hx/Desktop/ECS272-Winter2021/Homework2/hahliu/react-template/react-d3/src/AdvancedChart.js",["79"],"import React, { Component } from 'react';\nimport * as d3 from \"d3\";\n\nclass AdvancedChart extends Component {\n\n    componentDidMount() {\n        this.drawChart();\n    }\n\n    drawChart() {\n        d3.csv(this.props.data)\n            .then(csv => {\n                // log csv in browser console\n                //console.log(csv);\n\n                // create data by selecting two columns from csv \n                var data = csv.map(row => {\n                    return {\n                        time: row['Time'],\n                        category: row['Category']\n                    }\n                })\n\n                //var totalData = [];\n                var theftData = [];\n                var buglaryDate = [];\n                var assaultData = [];\n                var missingPData = [];\n                //var index = [\"00:00\", \"01:00\", \"02:00\", \"03:00\", \"04:00\", \"05:00\", \"06:00\", \"07:00\", \"08:00\", \"09:00\", \"10:00\", \"11:00\", \"12:00\", \"13:00\", \"14:00\", \"15:00\", \"16:00\", \"17:00\", \"18:00\", \"19:00\", \"20:00\", \"21:00\", \"22:00\", \"23:00\"];\n                var index = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23];\n                for (var i = 0; i < index.length; i++) {\n                    theftData[index[i]] = 0;   //LARCENY/THEFT\n                    buglaryDate[index[i]] = 0; //BURGLARY\n                    assaultData[index[i]] = 0; //ASSAULT\n                    missingPData[index[i]] = 0;//MISSING PERSON\n                }\n                \n                for (i = 0; i < data.length; i++) {\n                    var digit = data[i].time.substr(0, 1);\n                    var temp = data[i].time.substr(0, 2);\n                    if (digit == \"0\") {\n                        temp = data[i].time.substr(1, 2);\n                        if (data[i].category === \"LARCENY/THEFT\") {\n                            theftData[index[parseInt(temp)]]++;\n                        } else if (data[i].category === \"BURGLARY\") {\n                            buglaryDate[index[parseInt(temp)]]++;\n                        } else if (data[i].category === \"ASSAULT\") {\n                            assaultData[index[parseInt(temp)]]++;\n                        } else if (data[i].category === \"MISSING PERSON\") {\n                            missingPData[index[parseInt(temp)]]++;\n                        }\n                    } else {\n                        if (data[i].category === \"LARCENY/THEFT\") {\n                            theftData[index[parseInt(temp)]]++;\n                        } else if (data[i].category === \"BURGLARY\") {\n                            buglaryDate[index[parseInt(temp)]]++;\n                        } else if (data[i].category === \"ASSAULT\") {\n                            assaultData[index[parseInt(temp)]]++;\n                        } else if (data[i].category === \"MISSING PERSON\") {\n                            missingPData[index[parseInt(temp)]]++;\n                        }\n                    }\n                }\n\n                theftData = Object.entries(theftData);\n                buglaryDate = Object.entries(buglaryDate);\n                assaultData = Object.entries(assaultData);\n                missingPData = Object.entries(missingPData);\n\n                var dataMap = [];\n                for (var j = 0; j < index.length; j++) {\n                    var obj = {\n                        time: index[j],\n                        theft: theftData[j][1],\n                        buglary: buglaryDate[j][1],\n                        assault: assaultData[j][1],\n                        missing_people: missingPData[j][1]\n                    }\n                    dataMap.push(obj);\n                }\n                //console.log(dataMap);\n\n                var slice = [\"theft\", \"buglary\", \"assault\", \"missing_people\"];\n\n                // Visualization codes start here\n\n                var width = 600;\n                var height = 500;\n                var margin = { top: 0, right: 20, bottom: 30, left: 20 };\n\n                var svg = d3.select('#container')\n                    .append('svg')\n                    .attr('width', width + margin.left + margin.right)\n                    .attr('height', height + margin.top + margin.bottom)\n                    \n\n                var series = d3.stack()\n                    .keys(slice)\n                    .offset(d3.stackOffsetWiggle)\n                    .order(d3.stackOrderInsideOut)\n                    (dataMap);\n\n                console.log(series);\n\n                var area = d3.area()\n                    .x(d => x(d.data.time))\n                    .y0(d => y(d[0]))\n                    .y1(d => y(d[1]))\n\n                var x = d3.scaleLinear()\n                    .domain([0,23]) \n                    .range([margin.left, width])\n\n                var y = d3.scaleLinear()\n                    .domain([d3.min(series, d => d3.min(d, d => d[0])), d3.max(series, d => d3.max(d, d => d[1]))])\n                    .range([height - margin.bottom, margin.top])\n\n\n                var color = d3.scaleOrdinal()\n                    .domain(slice)\n                    .range(d3.schemeCategory10)\n\n\n                var xAxis = (g => g\n                    .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n                    .call(d3.axisBottom(x).ticks(width/30).tickSizeOuter(0))\n                    .call(g => g.select(\".domain\").remove())\n                );\n\n                svg.append(\"g\")\n                    .selectAll(\"path\")\n                    .data(series)\n                    .join(\"path\")\n                    .attr(\"fill\", ({ key }) => color(key))\n                    .attr(\"d\", area)\n                    .append(\"title\")\n                    .text(({ key }) => key);\n\n                svg.append(\"g\")\n                    .call(xAxis)\n                    .call(g =>\n                        g.select(\".tick:last-of-type text\")\n                            .clone()\n                            .attr(\"text-anchor\", \"middle\")\n                            .attr(\"x\", -(width - margin.left - margin.right) / 2)\n                            .attr(\"y\", margin.bottom - 10)\n                            .attr(\"font-weight\", \"bold\")\n                            .text(\"Time of a Day\")\n                    );\n\n            });\n\n    }\n\n    render() {\n        return <div id={\"#\" + this.props.id}></div>\n    }\n}\n\nexport default AdvancedChart;",["80","81"],"/Users/hx/Desktop/hahliu/react-template/react-d3/src/index.js",[],["82","83"],"/Users/hx/Desktop/hahliu/react-template/react-d3/src/reportWebVitals.js",[],"/Users/hx/Desktop/hahliu/react-template/react-d3/src/App.js",[],"/Users/hx/Desktop/hahliu/react-template/react-d3/src/BarChart2.js",[],"/Users/hx/Desktop/hahliu/react-template/react-d3/src/AdvancedChart.js",["84","85"],"/Users/hx/Desktop/hahliu/react-template/react-d3/src/DonutChart.js",["86"],"import React, { Component } from 'react';\nimport * as d3 from \"d3\";\n\nclass DonutChart extends Component {\n\n    componentDidMount() {\n        this.drawChart();\n    }\n\n    drawChart() {\n        d3.csv(this.props.data)\n            .then(csv => {\n                // log csv in browser console\n\n                // create data by selecting category column from csv \n                var data = csv.map(row => {\n                    return {\n                        category: row['Category']\n                    }\n                })\n\n                //process the data for chart\n                var countObj = [];\n                for (var i = 0; i < data.length; i++) {\n                    if (!countObj[data[i].category]) {\n                        countObj[data[i].category] = 0;\n                    }\n                    countObj[data[i].category]++;\n                }\n\n                var indexArr = Object.keys(countObj);\n                var countArray = Object.values(countObj);\n                var countArr = Object.entries(countObj);\n             \n\n                const dataMap = [];\n                for (var j = 0; j < countArr.length; j++) {\n                    var obj = {\n                        key: countArr[j][0],\n                        value: countArr[j][1]\n                    }\n                    dataMap.push(obj);\n                }\n\n                // Visualization codes start here\n\n                // set the dimensions and margins of the graph\n                var width = 600\n                var height = 600\n                var margin = 100\n\n                // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\n\n                var radius = Math.min(width, height) / 2 - margin\n\n                // append the svg object to the div called 'my_dataviz'\n                var svg = d3.select('#container')\n                    .append(\"svg\")\n                    .attr(\"width\", width)\n                    .attr(\"height\", height)\n                    .append(\"g\")\n                    .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\")\n\n                // set the color scale\n                var color = d3.scaleOrdinal()\n                    .domain(indexArr)\n                    .range(d3.schemeDark2);\n\n                // Compute the position of each group on the pie:\n                var pie = d3.pie()\n                    .sort(null) // Do not sort group by size  \n                    .value(function (d) { return d.value; })\n                var data_ready = pie(dataMap);\n\n                console.log(data_ready)\n       \n\n                // The arc generator\n\n                var arc = d3.arc()\n                    .innerRadius(radius * 0.5)         // This is the size of the donut hole \n                    .outerRadius(radius * 0.8)\n\n                // Another arc that won't be drawn. Just for labels positioning\n\n                var outerArc = d3.arc()\n                    .innerRadius(radius * 0.9)\n                    .outerRadius(radius * 0.9)\n\n                // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n\n                var donutplot = svg\n                    .selectAll('allSlices')\n                    .data(data_ready)\n                    .enter()\n                    .append('path')\n                    .attr('d', arc)\n                    .attr('fill', function (d) { return (color(d.data.key)) })\n                    .attr(\"stroke\", \"white\")\n                    .style(\"stroke-width\", \"2px\")\n                    .style(\"opacity\", 0.7);\n\n                svg\n                    .selectAll('allPolylines')\n                    .data(data_ready)\n                    .enter()\n                    .append('polyline')\n                    .attr(\"stroke\", \"black\")\n                    .style(\"fill\", \"none\")\n                    .attr(\"stroke-width\", 0.5)\n                    .attr('points', function (d) {\n                        var posA = arc.centroid(d) // line insertion in the slice\n                        var posB = outerArc.centroid(d) // line break: we use the other arc generator that has been built only for that\n                        var posC = outerArc.centroid(d); // Label position = almost the same as posB\n                        var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2 // we need the angle to see if the X position will be at the extreme right or extreme left\n                        posC[0] = radius * 0.95 * (midangle < Math.PI ? 1 : -1); // multiply by 1 or -1 to put it on the right or on the left\n                        return [posA, posB, posC]\n                    })\n\n                svg\n                    .selectAll('allLabels')\n                    .data(data_ready)\n                    .enter()\n                    .append('text')\n                    .text(function (d) { console.log(d.data.key); return d.data.key })\n                    .attr('transform', function (d) {\n                        var pos = outerArc.centroid(d);\n                        var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2\n                        pos[0] = radius * 0.99 * (midangle < Math.PI ? 1 : -1);\n                        return 'translate(' + pos + ')';\n                    })\n                    .style('font-size', '10px')\n                    .style('text-anchor', function (d) {\n                        var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2 //d.startAngle + (d.endAngle - d.startAngle) / 2\n                        return (midangle < Math.PI ? 'start' : 'end')\n                    })\n\n                //\n                // var getAngle = function (d) {\n                //     return (180 / Math.PI * (d.startAngle + d.endAngle) / 2 - 90);\n                // };\n                //\n                // g.append(\"text\")\n                //     .attr(\"transform\", function(d) {\n                //         return \"translate(\" + pos.centroid(d) + \") \" +\n                //             \"rotate(\" + getAngle(d) + \")\"; })\n                //     .attr(\"dy\", 5)\n                //     .style(\"text-anchor\", \"start\")\n                //     .text(function(d) { return d.data.label; });\n\n\n\n                // svg.append(\"g\")\n                //     .attr(\"font-family\", \"sans-serif\")\n                //     .attr(\"font-size\", 10)\n                //     .attr(\"text-anchor\", \"middle\")\n                //     .selectAll(\"text\")\n                //     .data(data_ready)\n                //     .join(\"text\")\n                //     .attr(\"transform\", d => `translate(${arc.centroid(d)})`)\n                //     .call(text => text.append(\"tspan\")\n                //         .attr(\"y\", \"-0.4em\")\n                //         .text(d => d.data.key));\n\n                var tooltip = document.getElementById('tooltip')\n                donutplot\n                    .on('mouseenter', function (d) {\n                        d3.select(this).style('fill', 'red')\n                        tooltip.innerHTML = 'In 2016, there is '+ (d3.select(this).data()[0].value) + ' of '+ (d3.select(this).data()[0].data.key) + ' Incidences.'\n                    })\n                    .on('mouseleave', function (d) {\n                        var colorOri = color((d3.select(this).data()[0].data.key));\n                        d3.select(this).style('fill', colorOri)\n                    });\n\n\n            });\n\n    }\n\n    render() {\n        return <div id={\"#\" + this.props.id}></div>\n    }\n}\n\nexport default DonutChart;",{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":32,"column":21,"nodeType":"93","messageId":"94","endLine":32,"endColumn":31},{"ruleId":"91","severity":1,"message":"95","line":55,"column":21,"nodeType":"93","messageId":"94","endLine":55,"endColumn":25},{"ruleId":"96","severity":1,"message":"97","line":41,"column":31,"nodeType":"98","messageId":"99","endLine":41,"endColumn":33},{"ruleId":"87","replacedBy":"100"},{"ruleId":"89","replacedBy":"101"},{"ruleId":"87","replacedBy":"102"},{"ruleId":"89","replacedBy":"103"},{"ruleId":"96","severity":1,"message":"97","line":41,"column":31,"nodeType":"98","messageId":"99","endLine":41,"endColumn":33},{"ruleId":"91","severity":1,"message":"104","line":130,"column":21,"nodeType":"93","messageId":"94","endLine":130,"endColumn":26},{"ruleId":"91","severity":1,"message":"92","line":32,"column":21,"nodeType":"93","messageId":"94","endLine":32,"endColumn":31},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"no-unused-vars","'countArray' is assigned a value but never used.","Identifier","unusedVar","'view' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["105"],["106"],["105"],["106"],"'chart' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]