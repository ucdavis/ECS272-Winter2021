[{"D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework2\\Templates\\react-template\\react-d3\\src\\index.js":"1","D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework2\\Templates\\react-template\\react-d3\\src\\App.js":"2","D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework2\\Templates\\react-template\\react-d3\\src\\reportWebVitals.js":"3","D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework2\\Templates\\react-template\\react-d3\\src\\BarChart.js":"4","D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework2\\Templates\\react-template\\react-d3\\src\\TotalVote.js":"5","D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework2\\Templates\\react-template\\react-d3\\src\\Topics.js":"6","D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework2\\Templates\\react-template\\react-d3\\src\\ArcDiagram.js":"7","D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework2\\cyqu\\src\\index.js":"8","D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework2\\cyqu\\src\\reportWebVitals.js":"9","D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework2\\cyqu\\src\\App.js":"10","D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework2\\cyqu\\src\\Topics.js":"11","D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework2\\cyqu\\src\\TotalVote.js":"12","D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework2\\cyqu\\src\\ArcDiagram.js":"13","D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework3\\cyqu\\src\\index.js":"14","D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework3\\cyqu\\src\\reportWebVitals.js":"15","D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework3\\cyqu\\src\\App.js":"16","D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework3\\cyqu\\src\\Topics.js":"17","D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework3\\cyqu\\src\\TotalVote.js":"18","D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework3\\cyqu\\src\\ArcDiagram.js":"19","D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework3\\cyqu\\src\\Pie.js":"20"},{"size":517,"mtime":1611513714635,"results":"21","hashOfConfig":"22"},{"size":1112,"mtime":1612242036805,"results":"23","hashOfConfig":"22"},{"size":375,"mtime":1611513714636,"results":"24","hashOfConfig":"22"},{"size":4501,"mtime":1611884284845,"results":"25","hashOfConfig":"22"},{"size":6750,"mtime":1612065727203,"results":"26","hashOfConfig":"22"},{"size":7462,"mtime":1612065257075,"results":"27","hashOfConfig":"22"},{"size":13028,"mtime":1612242885845,"results":"28","hashOfConfig":"22"},{"size":517,"mtime":1611513714635,"results":"29","hashOfConfig":"30"},{"size":375,"mtime":1611513714636,"results":"31","hashOfConfig":"30"},{"size":1112,"mtime":1612242036805,"results":"32","hashOfConfig":"30"},{"size":7462,"mtime":1612065257075,"results":"33","hashOfConfig":"30"},{"size":6750,"mtime":1612065727203,"results":"34","hashOfConfig":"30"},{"size":13028,"mtime":1612242885845,"results":"35","hashOfConfig":"30"},{"size":517,"mtime":1611513714635,"results":"36","hashOfConfig":"37"},{"size":375,"mtime":1611513714636,"results":"38","hashOfConfig":"37"},{"size":1091,"mtime":1613261369111,"results":"39","hashOfConfig":"37"},{"size":7462,"mtime":1612065257075,"results":"40","hashOfConfig":"41"},{"size":11237,"mtime":1613266450830,"results":"42","hashOfConfig":"37"},{"size":11223,"mtime":1613266567102,"results":"43","hashOfConfig":"37"},{"size":7971,"mtime":1613265840758,"results":"44","hashOfConfig":"37"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},"1ucaav6",{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"r4ehyq",{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"1fqwmqf",{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2jj0yi",{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"76"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework2\\Templates\\react-template\\react-d3\\src\\index.js",[],["90","91"],"D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework2\\Templates\\react-template\\react-d3\\src\\App.js",[],"D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework2\\Templates\\react-template\\react-d3\\src\\reportWebVitals.js",[],"D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework2\\Templates\\react-template\\react-d3\\src\\BarChart.js",["92"],"import React, {Component} from 'react';\r\nimport * as d3 from \"d3\";\r\n\r\nclass BarChart extends Component{\r\n\r\n    componentDidMount(){\r\n        this.drawChart();\r\n    }\r\n\r\n    drawChart(){\r\n        d3.csv( this.props.data)\r\n        .then(csv => {\r\n            // log csv in browser console\r\n        console.log(csv);\r\n\r\n\r\n\r\n        var data = csv.map(row => {\r\n          return {\r\n            yes: Number(row['Yes Votes']),\r\n            no: Number(row['No Votes']),\r\n            Subject: String(row['Subject']),\r\n            pass: String(row['Pass or Fail']),\r\n            totalVote: Number(row['Yes Votes']+row['No Votes'])\r\n          }\r\n        })\r\n            function processData(){\r\n                //Sort data by neighborhood group and track the cumulative price and number of data points per group to calculate the average\r\n                const set = {\r\n                    'less50k':0,\r\n                    '50kTo100k':0,\r\n                    '100kTo150k':0,\r\n                    '150kTo200k':0,\r\n                    '200kTo250k':0,\r\n                    '250kmore':0\r\n                };\r\n                data.forEach(d => {\r\n                    if (d.totalVote < 50000) {\r\n                        set['less50k'] = set['less50k'] + 1;\r\n\r\n                    } else if (d.totalVote < 100000) {\r\n                        set['50kTo100k'] = set['50kTo100k'] + 1;\r\n                    } else if (d.totalVote < 150000) {\r\n                        set['100kTo150k'] = set['100kTo150k'] + 1;\r\n                    } else if (d.totalVote < 200000) {\r\n                        set['150kTo200k'] = set['150kTo200k'] + 1;\r\n                    } else if (d.totalVote < 250000) {\r\n                        set['200kTo250k'] = set['200kTo250k'] + 1;\r\n                    } else {\r\n                        set['250kmore'] = set['250kmore'] + 1;\r\n                    }\r\n                })\r\n\r\n\r\n                return set\r\n            }\r\n            var count=processData()\r\n         /*********************************\r\n        * Visualization codes start here\r\n        * ********************************/\r\n       var width = 600;\r\n       var height = 400;\r\n       var margin = {left: 60, right: 20, top: 20, bottom: 60}\r\n \r\n       var svg = d3.select('#container')\r\n         .append('svg')\r\n           .attr('width', width + margin.left + margin.right)\r\n           .attr('height', height + margin.top + margin.bottom) \r\n \r\n       var view = svg.append(\"g\")\r\n         .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n \r\n       //scale functions\r\n       var x = d3.scaleLinear()\r\n         .domain([0, d3.max(data, d => d.yes)])\r\n         .range([0, width]);\r\n         \r\n       var y = d3.scaleLinear()\r\n         .domain([0, d3.max(data, d => d.no)])\r\n         .range([height, 0]);\r\n \r\n       \r\n       // create a scatter plot\r\n       var scatterPlot = view.selectAll('circle')\r\n         .data(data)\r\n         .join('circle')\r\n           .attr('cx', d => x(d.yes))\r\n           .attr('cy', d => y(d.no))\r\n           .attr('data-x', d => d.yes)\r\n           .attr('data-y', d => d.no)\r\n           .attr(\"r\", 8)\r\n           .attr('opacity', 0.5)\r\n           .attr(\"fill\", \"green\")\r\n       \r\n       var tooltip = document.getElementById('tooltip')\r\n       scatterPlot\r\n         .on('mouseenter', function(d) {\r\n           d3.select(this).style('fill', 'red')\r\n           tooltip.innerHTML = (data.Subject)+ ' Yes Votes = ' + d.target.dataset.x + ', No Votes = ' + d.target.dataset.y\r\n         })\r\n         .on('mouseleave', function(d) {\r\n           d3.select(this).style('fill', 'green')\r\n         })\r\n \r\n       // x axis\r\n       view.append(\"g\")\t\r\n         .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n         .call(d3.axisBottom(x).ticks(6))\r\n           .append(\"text\")\r\n           .attr(\"fill\", \"#000\")\r\n           .attr(\"x\", width / 2)\r\n           .attr('y', margin.bottom / 2)\r\n           .attr(\"dy\", \"0.71em\")\r\n           .attr(\"text-anchor\", \"end\")\r\n           .text(\"Yes Votes\");\r\n \r\n       // y axis\r\n       view.append(\"g\")\r\n         .call(d3.axisLeft(y).ticks(6))\r\n         .append(\"text\")\r\n           .attr(\"fill\", \"#000\")\r\n           .attr(\"transform\", \"rotate(-90)\")\r\n           .attr(\"x\", - height / 2)\r\n           .attr(\"y\", - margin.left)\r\n           .attr(\"dy\", \"0.71em\")\r\n           .attr(\"text-anchor\", \"end\")\r\n           .text(\"No Votes\");\r\n \r\n     });\r\n\r\n    }\r\n\r\n    render(){\r\n        return <div id={\"#\" + this.props.id}></div>\r\n    }\r\n}\r\n\r\nexport default BarChart;\r\n",["93","94"],"D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework2\\Templates\\react-template\\react-d3\\src\\TotalVote.js",[],"D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework2\\Templates\\react-template\\react-d3\\src\\Topics.js",[],"D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework2\\Templates\\react-template\\react-d3\\src\\ArcDiagram.js",["95"],"D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework2\\cyqu\\src\\index.js",[],"D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework2\\cyqu\\src\\reportWebVitals.js",[],"D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework2\\cyqu\\src\\App.js",[],"D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework2\\cyqu\\src\\Topics.js",[],"D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework2\\cyqu\\src\\TotalVote.js",[],"D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework2\\cyqu\\src\\ArcDiagram.js",["96"],"D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework3\\cyqu\\src\\index.js",[],["97","98"],"D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework3\\cyqu\\src\\reportWebVitals.js",[],"D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework3\\cyqu\\src\\App.js",[],"D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework3\\cyqu\\src\\Topics.js",[],"D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework3\\cyqu\\src\\TotalVote.js",[],"D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework3\\cyqu\\src\\ArcDiagram.js",["99"],"import React, {Component} from 'react';\r\nimport * as d3 from \"d3\";\r\n\r\nclass ArcDiagram extends Component{\r\n\r\n    componentDidMount(){\r\n        this.drawChart();\r\n    }\r\n\r\n    drawChart() {\r\n        d3.csv(this.props.data)\r\n            .then(csv => {\r\n                // log csv in browser console\r\n                console.log(csv);\r\n\r\n\r\n                var data = csv.map(row => {\r\n                    return {\r\n                        Keyword1: String(row['Type_1']),\r\n                        Keyword2: String(row['Type_2']),\r\n                        Keyword3: String(row['Egg_Group_1']),\r\n                        Keyword4: String(row['Egg_Group_2']),\r\n                        //Keyword5: String(row['Keyword5'])\r\n                    }\r\n                })\r\n\r\n                function processData2() {\r\n                    //Sort data by neighborhood group and track the cumulative price and number of data points per group to calculate the average\r\n                    const set = {};\r\n                    data.forEach(d => {\r\n                        if(d.Keyword1 in set){\r\n                            set[d.Keyword1].count = set[d.Keyword1].count+1;\r\n                        }else{\r\n                            const dataString = {\r\n                                Keyword: d.Keyword1,\r\n                                count: 1\r\n                            }\r\n                            set[d.Keyword1] = dataString;\r\n                        }\r\n                        if(d.Keyword2 in set){\r\n                            set[d.Keyword2].count = set[d.Keyword2].count+1;\r\n                        }else{\r\n                            const dataString = {\r\n                                Keyword: d.Keyword2,\r\n                                count: 1\r\n                            }\r\n                            set[d.Keyword2] = dataString;\r\n                        }\r\n                        if(d.Keyword3 in set){\r\n                            set[d.Keyword3].count = set[d.Keyword3].count+1;\r\n                        }else{\r\n                            const dataString = {\r\n                                Keyword: d.Keyword3,\r\n                                count: 1\r\n                            }\r\n                            set[d.Keyword3] = dataString;\r\n                        }\r\n                        if(d.Keyword4 in set){\r\n                            set[d.Keyword4].count = set[d.Keyword4].count+1;\r\n                        }else{\r\n                            const dataString = {\r\n                                Keyword: d.Keyword4,\r\n                                count: 1\r\n                            }\r\n                            set[d.Keyword4] = dataString;\r\n                        }\r\n\r\n\r\n\r\n                    })\r\n\r\n                    const formattedData = []\r\n                    Object.keys(set).forEach(d => {\r\n\r\n                        formattedData.push(set[d]);\r\n                    });\r\n\r\n                    formattedData.sort(function(a, b){\r\n                        if(a.count < b.count) { return 1; }\r\n                        if(a.count > b.count) { return -1; }\r\n                        return 0;\r\n                    })\r\n                    return formattedData\r\n                }\r\n\r\n                var count = processData2()\r\n\r\n                var sortedData=count.slice(1,11);\r\n\r\n                var set=new Set();\r\n\r\n                var i;\r\n\r\n                let map=new Map();\r\n                const node=[]\r\n                for(i=1;i<sortedData.length;i++){\r\n                    map[sortedData[i].Keyword]=i;\r\n                    set.add(sortedData[i].Keyword)\r\n                    const dataString = {\r\n                        id: i,\r\n                        name: count[i].Keyword\r\n                    }\r\n                    node.push(dataString)\r\n                }\r\n\r\n\r\n                const links=[]\r\n                data.forEach(d => {\r\n                    if(d.Keyword1!==\"\"&&d.Keyword2!==\"\"&&set.has(d.Keyword1)&&set.has(d.Keyword2)){\r\n                        const dataString = {\r\n                            source: map[d.Keyword1],\r\n                            target: map[d.Keyword2]\r\n                        }\r\n                        links.push(dataString)\r\n                    }\r\n\r\n                    if(d.Keyword1!==\"\"&&d.Keyword3!==\"\"&&set.has(d.Keyword1)&&set.has(d.Keyword3)){\r\n                        const dataString = {\r\n                            source: map[d.Keyword1],\r\n                            target: map[d.Keyword3]\r\n                        }\r\n                        links.push(dataString)\r\n                    }\r\n\r\n                    if(d.Keyword1!==\"\"&&d.Keyword4!==\"\"&&set.has(d.Keyword1)&&set.has(d.Keyword4)){\r\n                        const dataString = {\r\n                            source: map[d.Keyword1],\r\n                            target: map[d.Keyword4]\r\n                        }\r\n                        links.push(dataString)\r\n                    }\r\n\r\n\r\n\r\n                    if(d.Keyword2!==\"\"&&d.Keyword3!==\"\"&&set.has(d.Keyword2)&&set.has(d.Keyword3)){\r\n                        const dataString = {\r\n                            source: map[d.Keyword2],\r\n                            target: map[d.Keyword3]\r\n                        }\r\n                        links.push(dataString)\r\n                    }\r\n\r\n                    if(d.Keyword2!==\"\"&&d.Keyword4!==\"\"&&set.has(d.Keyword2)&&set.has(d.Keyword4)){\r\n                        const dataString = {\r\n                            source: map[d.Keyword2],\r\n                            target: map[d.Keyword4]\r\n                        }\r\n                        links.push(dataString)\r\n                    }\r\n\r\n\r\n                    if(d.Keyword3!==\"\"&&d.Keyword4!==\"\"&&set.has(d.Keyword3)&&set.has(d.Keyword4)){\r\n                        const dataString = {\r\n                            source: map[d.Keyword3],\r\n                            target: map[d.Keyword4]\r\n                        }\r\n                        links.push(dataString)\r\n                    }\r\n\r\n\r\n                })\r\n                /*********************************\r\n                 * Visualization codes start here\r\n                 * ********************************/\r\n                var width = 700;\r\n                var height = 500;\r\n                var margin = {left: 100, right: 20, top: 20, bottom: 60}\r\n                // append the svg object to the body of the page\r\n                var svg = d3.select(\"#container\")\r\n                    .append(\"svg\")\r\n                    .attr(\"width\", width + margin.left + margin.right)\r\n                    .attr(\"height\", height + margin.top + margin.bottom)\r\n                    .append(\"g\")\r\n                    .attr(\"transform\",\r\n                        \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n\r\n\r\n                    // List of node names\r\n                    var allNodes = node.map(function(d){return d.name})\r\n\r\n                    // A linear scale to position the nodes on the X axis\r\n                    var x = d3.scalePoint()\r\n                        .range([0, width])\r\n                        .domain(allNodes)\r\n\r\n                    // Add the circle for the nodes\r\n                    var nodes = svg\r\n                        .selectAll(\"mynodes\")\r\n                        .data(node)\r\n                        .enter()\r\n                        .append(\"circle\")\r\n                        .attr(\"cx\", function(d){ return(x(d.name))})\r\n                        .attr(\"cy\", height-30)\r\n                        .attr(\"r\", 8)\r\n                        .style(\"fill\", \"#69b3a2\")\r\n\r\n                    // And give them a label\r\n                    var labels = svg\r\n                        .selectAll(\"mylabels\")\r\n                        .data(node)\r\n                        .enter()\r\n                        .append(\"text\")\r\n                        .attr(\"x\", function(d){ return(x(d.name))})\r\n                        .attr(\"y\", height-10)\r\n                        .text(function(d){ return(d.name)})\r\n                        .style(\"text-anchor\", \"middle\")\r\n\r\n\r\n                    var idToNode = {};\r\n                    node.forEach(function (n) {\r\n                        idToNode[n.id] = n;\r\n                    });\r\n\r\n\r\n                    // Add the links\r\n                    var Links = svg\r\n                        .selectAll('mylinks')\r\n                        .data(links)\r\n                        .enter()\r\n                        .append('path')\r\n                        .attr('d', function (d) {\r\n                            var start = x(idToNode[d.source].name)    // X position of start node on the X axis\r\n                            var end = x(idToNode[d.target].name)      // X position of end node\r\n                            return ['M', start, height-30,    // the arc starts at the coordinate x=start, y=height-30 (where the starting node is)\r\n                                'A',                            // This means we're gonna build an elliptical arc\r\n                                (start - end)/2, ',',    // Next 2 lines are the coordinates of the inflexion point. Height of this point is proportional with start - end distance\r\n                                (start - end)/2, 0, 0, ',',\r\n                                start < end ? 1 : 0, end, ',', height-30] // We always want the arc on top. So if end is before start, putting 0 here turn the arc upside down.\r\n                                .join(' ');\r\n                        })\r\n                        .style(\"fill\", \"none\")\r\n                        .attr(\"stroke\", \"black\")\r\n\r\n                    // Add the highlighting functionality\r\n                    nodes\r\n                        .on('mouseover', function (d) {\r\n                            // Highlight the nodes: every node is green except of him\r\n                            nodes.style('fill', \"#B8B8B8\")\r\n                            d3.select(this).style('fill', '#69b3b2')\r\n                            // Highlight the connections\r\n                            Links\r\n                                .style('stroke', function (link_d) { return (link_d.source === d.id || link_d.target === d.id) ? '#69b3b2' : '#B8B8B8';})\r\n                                .style('stroke-width', function (link_d) { return link_d.source === d.id || link_d.target === d.id ? 4 : 1;})\r\n                        })\r\n                        .on('mouseout', function (d) {\r\n                            nodes.style('fill', \"#69b3a2\")\r\n                            Links\r\n                                .style('stroke', 'black')\r\n                                .style('stroke-width', '1')\r\n                        })\r\n               // })\r\n\r\n                svg\r\n                    .append(\"text\")\r\n                    .attr(\"text-anchor\", \"middle\")\r\n                    .style(\"fill\", \"black\")\r\n                    .style(\"font-size\", \"17px\")\r\n                    .attr(\"x\", 200)\r\n                    .attr(\"y\", 40)\r\n                    .html(\"Arc Diagram of Relations of Top 10 Common Groups\")\r\n\r\n\r\n\r\n                return svg.node();\r\n\r\n\r\n            });\r\n    }\r\n\r\n    render(){\r\n        return <div id={\"#\" + this.props.id}></div>\r\n    }\r\n}\r\n\r\nexport default ArcDiagram;\r\n","D:\\UC Davis\\课程\\2021WQ\\ECS272\\ECS272-Winter2021\\Homework3\\cyqu\\src\\Pie.js",[],{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":57,"column":17,"nodeType":"106","messageId":"107","endLine":57,"endColumn":22},{"ruleId":"100","replacedBy":"108"},{"ruleId":"102","replacedBy":"109"},{"ruleId":"104","severity":1,"message":"110","line":232,"column":25,"nodeType":"106","messageId":"107","endLine":232,"endColumn":31},{"ruleId":"104","severity":1,"message":"110","line":232,"column":25,"nodeType":"106","messageId":"107","endLine":232,"endColumn":31},{"ruleId":"100","replacedBy":"111"},{"ruleId":"102","replacedBy":"112"},{"ruleId":"104","severity":1,"message":"110","line":199,"column":25,"nodeType":"106","messageId":"107","endLine":199,"endColumn":31},"no-native-reassign",["113"],"no-negated-in-lhs",["114"],"no-unused-vars","'count' is assigned a value but never used.","Identifier","unusedVar",["113"],["114"],"'labels' is assigned a value but never used.",["113"],["114"],"no-global-assign","no-unsafe-negation"]