[{"/home/fzli/github/ECS272-InfoVis/Homework2/fzli/app/src/index.js":"1","/home/fzli/github/ECS272-InfoVis/Homework2/fzli/app/src/App.js":"2","/home/fzli/github/ECS272-InfoVis/Homework2/fzli/app/src/reportWebVitals.js":"3","/home/fzli/github/ECS272-InfoVis/Homework2/fzli/app/src/views/pie.js":"4","/home/fzli/github/ECS272-InfoVis/Homework2/fzli/app/src/views/bar.js":"5","/home/fzli/github/ECS272-InfoVis/Homework2/fzli/app/src/views/parallel.js":"6","/home/fzli/github/ECS272-InfoVis/Homework3/fzli/app/src/index.js":"7","/home/fzli/github/ECS272-InfoVis/Homework3/fzli/app/src/reportWebVitals.js":"8","/home/fzli/github/ECS272-InfoVis/Homework3/fzli/app/src/App.js":"9","/home/fzli/github/ECS272-InfoVis/Homework3/fzli/app/src/views/pie.js":"10","/home/fzli/github/ECS272-InfoVis/Homework3/fzli/app/src/views/bar.js":"11","/home/fzli/github/ECS272-InfoVis/Homework3/fzli/app/src/views/parallel.js":"12"},{"size":500,"mtime":1611443471148,"results":"13","hashOfConfig":"14"},{"size":1064,"mtime":1612140584958,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1611443471148,"results":"16","hashOfConfig":"14"},{"size":7539,"mtime":1612249264861,"results":"17","hashOfConfig":"14"},{"size":5386,"mtime":1612249613008,"results":"18","hashOfConfig":"14"},{"size":6328,"mtime":1612250905626,"results":"19","hashOfConfig":"14"},{"size":500,"mtime":1611443471148,"results":"20","hashOfConfig":"21"},{"size":362,"mtime":1611443471148,"results":"22","hashOfConfig":"21"},{"size":1064,"mtime":1613178563492,"results":"23","hashOfConfig":"21"},{"size":12596,"mtime":1613273353022,"results":"24","hashOfConfig":"21"},{"size":5839,"mtime":1613273685638,"results":"25","hashOfConfig":"21"},{"size":6623,"mtime":1613274177972,"results":"26","hashOfConfig":"21"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"19fv1sb",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"29"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1wjdg83",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/fzli/github/ECS272-InfoVis/Homework2/fzli/app/src/index.js",[],["55","56"],"/home/fzli/github/ECS272-InfoVis/Homework2/fzli/app/src/App.js",[],"/home/fzli/github/ECS272-InfoVis/Homework2/fzli/app/src/reportWebVitals.js",[],"/home/fzli/github/ECS272-InfoVis/Homework2/fzli/app/src/views/pie.js",[],"/home/fzli/github/ECS272-InfoVis/Homework2/fzli/app/src/views/bar.js",["57","58"],"/*\n* @Author: fangzhouli\n* @Date:   2021-01-28 18:53:39\n* @Last Modified by:   fangzhouli\n* @Last Modified time: 2021-02-01 23:06:52\n*/\n\nimport React from 'react';\nimport * as d3 from 'd3';\nimport * as d3Collection from 'd3-collection';\n\nimport './bar.css';\n\nexport default class Bar extends React.Component {\n\n  componentDidMount() {\n    this.drawChart();\n  }\n\n  processCsv(csv) {\n    const feature = 'Letter'\n    const data = {};\n    csv.forEach(row => {\n      let key = row[feature].trim();\n      if (data.hasOwnProperty(key)) {\n        data[key] += 1;\n      } else {\n        data[key] = 1;\n      }\n    });\n\n    const dataProcessed = [];\n    const keys = Object.keys(data);\n    keys.forEach(k => {\n      dataProcessed.push([k, data[k]])\n    });\n    return dataProcessed;\n  }\n\n  drawChart() {\n    d3.csv(this.props.data)\n      .then(csv => {\n        let numClick = 0;\n        const data = this.processCsv(csv);\n        const width = document.getElementById('container').clientWidth / 2,\n              height = document.getElementById('container')\n                .getAttribute('height') / 2,\n              margin = { top: 100, bottom: 100, left: 100, right: 100 },\n              fontSize = 12;\n\n        const y = d3.scaleLinear()\n          .range([height - margin.bottom, margin.top])\n          .domain([0, d3.max(d3.map(data, d => d[1]))]);\n\n        const div = d3.select('#basic').select('#barPlot');\n\n        const button = div\n          .append('button')\n            .text('Sort')\n            .on('click', d => {\n              sortBars(data);\n            })\n\n        const svg = div\n          .append('svg')\n            .attr('width', width)\n            .attr('height', height)\n\n        // Add border and title.\n        svg\n          .append('rect')\n            .attr('x', 25)\n            .attr('y', 25)\n            .attr('height', height - 25 * 2)\n            .attr('width', width - 25 * 2)\n            .style('stroke', 'black')\n            .style('fill', 'none')\n            .style('stroke-width', 1);\n        svg\n          .append('text')\n            .attr('x', 35)\n            .attr('y', 45)\n            .attr('stroke', 'black')\n            .text('Measure Letter Distribution');\n\n        const legend = svg\n            .append('text')\n              .attr('x', width - margin.right - 120)\n              .attr('y', margin.top);\n          legend\n            .append('tspan')\n              .text('Legend:');\n          legend\n            .append('tspan')\n              .attr('x', width - margin.right - 120)\n              .attr('y', margin.top + 20)\n              .text('Click button to sort.');\n\n        svg\n          .append('g')\n            .attr('id', 'x-axis');\n        svg.select('#x-axis')\n          .append('text')\n            .attr(\n              'transform',\n              \"translate(\" + (width - margin.right / 2) + \",\" +\n                (height - margin.bottom) + \")\")\n            .attr(\"text-anchor\", \"end\")\n            .attr('font-size', fontSize)\n            .text(\"Letter\");\n        svg\n          .append('g')\n            .attr('id', 'y-axis')\n\n        svg.select('#y-axis')\n          .append(\"text\")\n            .attr(\n              \"transform\",\n              \"translate(\" + (margin.left + 20) + \",\" + (margin.top - 5) + \")\")\n            .attr(\"text-anchor\", \"end\")\n            .attr('font-size', fontSize)\n            .text(\"Number\")\n        svg\n          .append('g')\n            .attr('id', 'bars')\n\n          // Visualize y-axis.\n          svg.select('#y-axis')\n            .append(\"g\")\n              .call(d3.axisLeft(y).tickFormat(d => d).ticks(10))\n              .attr('transform', 'translate(' + margin.left + ',0)')\n\n        sortBars(data);\n\n        function sortBars(dataTmp) {\n          const dataOriginal = dataTmp;\n          const dataDescended = dataTmp.slice().sort((a, b) => b[1] - a[1]);\n          const dataAscended = dataTmp.slice().sort((a, b) => a[1] - b[1]);\n\n          let data = null;\n          if (numClick % 3 === 0) {\n            data = dataOriginal;\n          } else if (numClick % 3 === 1) {\n            data = dataDescended;\n          } else {\n            data = dataAscended;\n          }\n          const x = d3.scaleBand()\n            .range([margin.left, width - margin.right])\n            .padding(0.4)\n            .domain(d3.map(data, d => d[0]));\n\n          svg.select('#x-axis').select('.axis')\n            .remove();\n\n          svg.select('#x-axis')\n            .append('g')\n              .attr('class', 'axis')\n              .call(d3.axisBottom(x))\n              .attr('transform', 'translate(0,' + (height - margin.bottom) + ')')\n              .selectAll('text')\n                .attr('transform', 'translate(-15, 20)rotate(-90)');\n\n          // Visualize bars.\n          svg.select('#bars').selectAll('.bar')\n            .remove();\n\n          svg.select('#bars').selectAll('.bar')\n            .data(data, d => d[1])\n            .enter()\n            .append('rect')\n              .attr(\"class\", \"bar\")\n              .attr(\"x\", function(d) { return x(d[0]); })\n              .attr(\"y\", function(d) { return y(d[1]); })\n              .attr(\"width\", x.bandwidth())\n              .attr(\"height\", function(d) {\n                return height - margin.bottom - y(d[1]);\n              })\n              .attr('fill', 'steelblue');\n\n          numClick += 1;\n        }\n      });\n\n  }\n\n  render() {\n    return <div id=\"#bar\"></div>\n  }\n}",["59","60"],"/home/fzli/github/ECS272-InfoVis/Homework2/fzli/app/src/views/parallel.js",["61","62","63"],"/*\n* @Author: fangzhouli\n* @Date:   2021-01-30 16:48:51\n* @Last Modified by:   fangzhouli\n* @Last Modified time: 2021-02-01 23:28:25\n*/\nimport React from 'react';\nimport * as d3 from 'd3';\nimport * as d3Collection from 'd3-collection';\n\nexport default class Parallel extends React.Component {\n\n  componentDidMount() {\n    this.drawChart();\n  }\n\n  processCsv(csv) {\n    const data = [];\n\n    csv.forEach(row => {\n      if (row['Pass or Fail'].trim() !== ''\n          && row['Type Measure'].trim() !== '') {\n        data.push({\n          Year: Number(row['Year']),\n          YesVote: Number(row['Yes Votes']),\n          NoVote: Number(row['No Votes']),\n          Percent: Number(row['Percent']),\n          PassOrFail: row['Pass or Fail']\n        });\n      }\n    });\n\n    return data;\n  }\n\n  drawChart() {\n    d3.csv(this.props.data)\n      .then(csv => {\n        const width = document.getElementById('container').clientWidth / 2,\n              height = document.getElementById('container').getAttribute('height'),\n              margin = { top: 100, right: 100, bottom: 100, left: 100 };\n\n        const data = this.processCsv(csv);\n        const dimensions = Object.keys(data[0]);\n        const line = d3.line();\n        const x = d3.scalePoint()\n          .range([margin.left, width - margin.right])\n          .domain(dimensions);\n        const y = {};\n        dimensions.forEach(dim => {  // Construct a y-axis for each dimension.\n          if (dim !== 'PassOrFail') {  // Linear scale.\n            y[dim] = d3.scaleLinear()\n              .range([margin.top, height - margin.bottom])\n              .domain([d3.min(data.map(row => row[dim])),\n                       d3.max(data.map(row => row[dim]))]);\n          } else {  // Band scale.\n            y[dim] = d3.scalePoint()\n              .range([margin.top, height - margin.bottom])\n              .domain(\n                Array.from(new Set(data.map(row => row[dim].trim()))));\n          }\n        });\n\n        // Construct the visualization for parallel coordinate chart.\n        const svg = d3.select('#advanced')\n          .append('svg')\n            .attr('width', width)\n            .attr('height', height)\n        svg\n          .append('rect')\n            .attr('x', 25)\n            .attr('y', 25)\n            .attr('height', height - 25 * 2)\n            .attr('width', width - 25 * 2)\n            .style('stroke', 'black')\n            .style('fill', 'none')\n            .style('stroke-width', 1);\n        svg\n          .append('text')\n            .attr('x', 35)\n            .attr('y', 45)\n            .attr('stroke', 'black')\n            .text('Parallel Coordinates');\n\n        const description = svg\n          .append('text')\n            .attr('x', 250)\n            .attr('y', 45)\n            .text(\"Hover your mouse on 'Year' to hightlight!\")\n\n        const legend = svg\n          .append('g')\n            .attr(\n              'transform',\n              'translate(' + (margin.left) + ',' + (height - margin.bottom + 30) + ')')\n            .attr('x', margin.left)\n            .attr('y', margin.top)\n        legend\n          .append('circle')\n            .attr('r', 6)\n            .style('fill', 'steelblue')\n        legend\n          .append('circle')\n            .attr('cy', 20)\n            .attr('r', 6)\n            .style('fill', 'orange')\n        legend\n          .append('text')\n            .attr('x', 10)\n            .attr('y', 10)\n            .text('Pass')\n        legend\n          .append('text')\n            .attr('x', 10)\n            .attr('y', 30)\n            .text('Fail')\n\n        svg\n          .append('g')\n            .attr('id', 'yAxes');\n        svg\n          .append('g')\n            .attr('id', 'lines')\n\n        // Visualize y-axes.\n        dimensions.forEach(dim => {\n          if (dim === 'Year') {\n            svg.select('#yAxes')\n              .append('g')\n                .call(d3.axisLeft(y[dim]).tickFormat(d3.format('d')))\n                .attr('class', 'yAxis')\n                .attr(\n                  'transform',\n                  'translate(' + x(dim) + ',0)')\n          } else {\n            svg.select('#yAxes')\n              .append('g')\n                .call(d3.axisLeft(y[dim]))\n                .attr('class', 'yAxis')\n                .attr(\n                  'transform',\n                  'translate(' + x(dim) + ',0)')\n          }\n        });\n        svg.select('#yAxes').selectAll('.yAxis')\n          .data(dimensions)\n          .join()\n          .append('text')\n            .text(d => d)\n            .attr('transform', 'translate(0,' + (margin.top - 10) + ')')\n            .style('font-size', 12)\n            .style('fill', 'black');\n\n        function clusterYears(year) {\n          if (year == 1960) return 1965;\n\n          return Math.ceil((Number(year) - 1960) / 5) * 5 + 1960;\n        }\n\n        // Visualize lines.\n        svg.select('#lines').selectAll('.line')\n          .data(data)\n          .enter()\n          .append('path')\n            .attr('class', d => 'line line' + clusterYears(d['Year']))\n            .attr('d', path)\n            .attr(\n              'stroke', d => d['PassOrFail'] === 'P' ? 'steelblue' : 'orange')\n            .attr('fill', 'none')\n            .style('opacity', 0.5)\n            .on('mouseover', highlight)\n            .on('mouseleave', unHighlight);\n\n        function highlight(event, d) {\n          d3.select('#lines').selectAll('path')\n            .transition().duration(200)\n            .style('stroke', 'lightgrey')\n            .style('opacity', '0.2');\n          d3.selectAll('.line' + clusterYears(d['Year']))\n            .transition().duration(200)\n            .style(\n              'stroke',\n              d => d['PassOrFail'] === 'P' ? 'steelblue' : 'orange')\n            .style('opacity', '1');\n        }\n\n        function unHighlight(d) {\n          d3.select('#lines').selectAll('path')\n            .transition().duration(200).delay(1000)\n            .style(\n              'stroke',\n              d => d['PassOrFail'] === 'P' ? 'steelblue' : 'orange')\n            .style(\"opacity\", 0.5)\n        }\n\n        function path(d) {\n          let coordinates = [];\n          dimensions.forEach(dim => {\n            coordinates.push([x(dim), y[dim](d[dim])]);\n          });\n          return line(coordinates);\n        }\n      });\n  }\n\n  render() {\n    return <div id='#parallel'></div>\n  }\n}","/home/fzli/github/ECS272-InfoVis/Homework3/fzli/app/src/index.js",[],"/home/fzli/github/ECS272-InfoVis/Homework3/fzli/app/src/reportWebVitals.js",[],"/home/fzli/github/ECS272-InfoVis/Homework3/fzli/app/src/App.js",[],"/home/fzli/github/ECS272-InfoVis/Homework3/fzli/app/src/views/pie.js",["64","65"],"/home/fzli/github/ECS272-InfoVis/Homework3/fzli/app/src/views/bar.js",[],"/home/fzli/github/ECS272-InfoVis/Homework3/fzli/app/src/views/parallel.js",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":10,"column":13,"nodeType":"72","messageId":"73","endLine":10,"endColumn":25},{"ruleId":"70","severity":1,"message":"74","line":57,"column":15,"nodeType":"72","messageId":"73","endLine":57,"endColumn":21},{"ruleId":"66","replacedBy":"75"},{"ruleId":"68","replacedBy":"76"},{"ruleId":"70","severity":1,"message":"71","line":9,"column":13,"nodeType":"72","messageId":"73","endLine":9,"endColumn":25},{"ruleId":"70","severity":1,"message":"77","line":85,"column":15,"nodeType":"72","messageId":"73","endLine":85,"endColumn":26},{"ruleId":"78","severity":1,"message":"79","line":155,"column":20,"nodeType":"80","messageId":"81","endLine":155,"endColumn":22},{"ruleId":"70","severity":1,"message":"82","line":271,"column":23,"nodeType":"72","messageId":"73","endLine":271,"endColumn":24},{"ruleId":"70","severity":1,"message":"83","line":274,"column":22,"nodeType":"72","messageId":"73","endLine":274,"endColumn":30},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"no-unused-vars","'d3Collection' is defined but never used.","Identifier","unusedVar","'button' is assigned a value but never used.",["84"],["85"],"'description' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'i' is assigned a value but never used.","'arcTween' is defined but never used.","no-global-assign","no-unsafe-negation"]