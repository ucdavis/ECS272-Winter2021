[{"/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework2/kunhuang/react-template/react-d3/src/index.js":"1","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework2/kunhuang/react-template/react-d3/src/reportWebVitals.js":"2","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework2/kunhuang/react-template/react-d3/src/App.js":"3","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework2/kunhuang/react-template/react-d3/src/My_Navbar.js":"4","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework2/kunhuang/react-template/react-d3/src/Sk_BarChart.js":"5","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework2/kunhuang/react-template/react-d3/src/data_processing.js":"6","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework2/kunhuang/react-template/react-d3/src/Sk_PieChart.js":"7","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework2/kunhuang/react-template/react-d3/src/Sk_VoronoiDiagram.js":"8","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework3/kunhuang/react-template/react-d3/src/index.js":"9","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework3/kunhuang/react-template/react-d3/src/My_Navbar.js":"10","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework3/kunhuang/react-template/react-d3/src/App.js":"11","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework3/kunhuang/react-template/react-d3/src/reportWebVitals.js":"12","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework3/kunhuang/react-template/react-d3/src/Sk_BarChart.js":"13","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework3/kunhuang/react-template/react-d3/src/Sk_PieChart.js":"14","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework3/kunhuang/react-template/react-d3/src/Sk_VoronoiDiagram.js":"15","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework3/kunhuang/react-template/react-d3/src/data_processing.js":"16","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework3/kunhuang/react-template/react-d3/src/Sk_CirclePlot.js":"17","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/index.js":"18","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/reportWebVitals.js":"19","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/Home.js":"20","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/Geo.js":"21","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/ParallelCoordinate.js":"22","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/ImageSKY.js":"23","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/Ggmap.js":"24","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/Stat_view.js":"25","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/GetData.js":"26","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/BarChart2.js":"27","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/Stat_view_second.js":"28","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/BarChart3.js":"29","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/BarChart4.js":"30"},{"size":1639,"mtime":1611538557654,"results":"31","hashOfConfig":"32"},{"size":362,"mtime":1610612293135,"results":"33","hashOfConfig":"32"},{"size":1134,"mtime":1611538129388,"results":"34","hashOfConfig":"32"},{"size":922,"mtime":1611047410608,"results":"35","hashOfConfig":"32"},{"size":7389,"mtime":1611901226203,"results":"36","hashOfConfig":"32"},{"size":846,"mtime":1611349337312,"results":"37","hashOfConfig":"32"},{"size":4958,"mtime":1611901002804,"results":"38","hashOfConfig":"32"},{"size":4766,"mtime":1611907353182,"results":"39","hashOfConfig":"32"},{"size":2165,"mtime":1613186873203,"results":"40","hashOfConfig":"41"},{"size":922,"mtime":1611047410608,"results":"42","hashOfConfig":"41"},{"size":1134,"mtime":1613192805692,"results":"43","hashOfConfig":"41"},{"size":362,"mtime":1610612293135,"results":"44","hashOfConfig":"41"},{"size":8630,"mtime":1613193391350,"results":"45","hashOfConfig":"41"},{"size":5807,"mtime":1613193369578,"results":"46","hashOfConfig":"41"},{"size":12188,"mtime":1613193318438,"results":"47","hashOfConfig":"41"},{"size":846,"mtime":1611349337312,"results":"48","hashOfConfig":"41"},{"size":1893,"mtime":1613070031653,"results":"49","hashOfConfig":"41"},{"size":1540,"mtime":1615723915841,"results":"50","hashOfConfig":"51"},{"size":362,"mtime":1610612293135,"results":"52","hashOfConfig":"51"},{"size":688,"mtime":1614456644020,"results":"53","hashOfConfig":"51"},{"size":386,"mtime":1615692321626,"results":"54","hashOfConfig":"51"},{"size":608,"mtime":1615726868969,"results":"55","hashOfConfig":"51"},{"size":25185,"mtime":1615784174943,"results":"56","hashOfConfig":"51"},{"size":5793,"mtime":1615783587895,"results":"57","hashOfConfig":"51"},{"size":1701,"mtime":1615725711278,"results":"58","hashOfConfig":"51"},{"size":5664,"mtime":1615721144430,"results":"59","hashOfConfig":"51"},{"size":10216,"mtime":1615723193331,"results":"60","hashOfConfig":"51"},{"size":1515,"mtime":1615723813974,"results":"61","hashOfConfig":"51"},{"size":6849,"mtime":1615724066291,"results":"62","hashOfConfig":"51"},{"size":3607,"mtime":1615726473166,"results":"63","hashOfConfig":"51"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"67"},"nwgv27",{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"67"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"67"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"67"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"67"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"90"},"xa1qid",{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"90"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"90"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"90"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"116"},"iv36zs",{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"116"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"116"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"116"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"130","messages":"131","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"116"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"116"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"116"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"116"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"116"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"116"},"/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework2/kunhuang/react-template/react-d3/src/index.js",["150","151","152"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport data from  './datasets/Film_Locations_in_San_Francisco.csv';\nimport App from './App';\nimport My_Navbar from './My_Navbar';\nimport reportWebVitals from './reportWebVitals';\nimport Sk_BarChart from './Sk_BarChart';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <link\n      rel=\"stylesheet\"\n      href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\"\n      integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\"\n      crossorigin=\"anonymous\"\n    />\n    <link\n      rel=\"stylesheet\"\n      href=\"./index.css\"\n    />\n      <My_Navbar/>\n      <div className=\"sk_container\">\n        <div className=\"sk_row\">\n          <div className=\"sk_col\">\n            <h2>Context view: Directors and their appearances</h2>\n            <App kind=\"VoronoiDiagram\"/> \n          </div>\n          <div className=\"sk_col\">\n            <div className=\"sk_row\">\n              <h2>Focus view: Top X most popular directors in all film locations</h2>\n              <App kind=\"PieChart\"/>\n            </div>\n            <div className=\"sk_row\">\n              <h2>Focus view: Top X most popular directors in selected film locations</h2>\n              <App kind=\"BarChart\"/>\n            </div>\n          </div>\n        </div>\n      </div>\n\n\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["153","154"],"/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework2/kunhuang/react-template/react-d3/src/reportWebVitals.js",[],"/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework2/kunhuang/react-template/react-d3/src/App.js",["155","156","157"],"import React from 'react';\nimport Sk_BarChart from \"./Sk_BarChart\";\nimport Sk_PieChart from \"./Sk_PieChart\";\nimport csv from  './datasets/Film_Locations_in_San_Francisco.csv';\nimport Sk_VoronoiDiagram from './Sk_VoronoiDiagram';\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state ={\n      data: csv\n    };\n\n  }\n\n  render(){\n    if(this.props.kind === \"BarChart\"){\n      return (\n        <div>\n          <div id=\"container\"> \n          </div>\n          <Sk_BarChart data={this.state.data} width={700} height={200} />\n        </div>\n      );\n    }else if(this.props.kind === \"PieChart\"){\n      return (\n        <div>\n          <div id=\"container_pie\"> \n          </div>\n          <Sk_PieChart data={this.state.data} width={600} height={400} />\n        </div>\n      );\n    }else if(this.props.kind === \"VoronoiDiagram\"){\n      return (\n        <div>\n          <div id=\"container_VoronoiDiagram\"> \n          </div>\n          <Sk_VoronoiDiagram data={this.state.data} width={800} height={800} />\n        </div>\n      );\n    }\n    \n    return (\n      <div></div>\n    );\n\n  }\n\n}\n\nexport default App;\n","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework2/kunhuang/react-template/react-d3/src/My_Navbar.js",[],"/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework2/kunhuang/react-template/react-d3/src/Sk_BarChart.js",["158","159","160","161","162"],"import React, {Component} from 'react';\nimport * as d3 from \"d3\";\nimport { data_processing,data_cleaning } from './data_processing';\n\nclass Sk_BarChart extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            value: 5,\n            location: \"City Hall\"\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSelect = this.handleSelect.bind(this);\n    }\n\n    handleChange(event){\n        this.setState({\n            value: event.target.value\n        });\n    }\n\n    handleSelect(event){\n        this.setState({\n            location:event.target.value\n        });\n    }\n\n    componentDidMount(){\n        this.drawChart();\n    }\n\n    componentDidUpdate() {\n        this.drawChart();\n    }\n\n    data_pipeline(num, location, dataset){\n        let top_directors = [];\n        console.log(\"dataset: \",dataset);\n        let data = data_processing(data_cleaning(dataset,[\"Director\",\"Locations\"]),[\"Director\",\"Locations\"]);\n        \n        let director_stat = {};\n        let locations = new Set();\n        data.map(data=>{\n                locations.add(data[\"Locations\"].trim());\n                if(data[\"Locations\"].trim()!=location.trim()){\n                  return;\n                }\n                if(director_stat.hasOwnProperty(data[\"Director\"])){\n                  director_stat[data[\"Director\"]]+=1;\n                }else{\n                  director_stat[data[\"Director\"]]=1;\n                }\n              });\n        locations.delete(\"City Hall\");\n        d3.select(\"#locations\")\n          .selectAll(\"options\")\n          .data(locations)\n          .enter()\n          .append(\"option\")\n          .attr(\"value\",data=>data)\n          .text(data=>data);\n\n    for(let i = 0; i<num; i++){\n                let max_count = -1;\n                let max_director = \"\";\n                for(let prop in director_stat){\n                  if(director_stat[prop]>max_count){\n                    max_director = prop;\n                    max_count = director_stat[prop];\n                  }\n                }\n                top_directors.push({\n                name:max_director,\n                number:max_count\n                });\n                delete director_stat[max_director];\n            }\n        \n          console.log(top_directors);\n          return top_directors;\n    \n      }\n\n\n    drawChart(){\n            // log csv in browser console\n        d3.csv(this.props.data)\n        .then((dataset)=>{\n\n            let top_directors = this.data_pipeline(this.state.value,this.state.location,dataset);\n        \n            console.log(\"in drawchart:\",this.state.value);\n            console.log(top_directors);\n            if(!top_directors){\n                return;\n            }\n            console.log(\"in sk_barchart\");\n            console.log(top_directors);\n            let colors = d3.scaleSequential().domain([0,d3.max(top_directors,data=>data.number)]).interpolator(d3.interpolateBlues);\n            \n            \n             /********************************* \n            * Visualization codes start here\n            * ********************************/\n           var width = this.props.width;\n           var height = this.props.height;\n           var margin = {left: 50, right: 85, top: 20, bottom: 20}\n            \n    \n           let x_scale = d3.scaleBand()\n                      .domain(top_directors.map(data=>data.name))\n                      .rangeRound([margin.left, width - margin.right])\n                      .padding(0.1);\n    \n            let y_scale = d3.scaleLinear()\n                      .domain([0,d3.max(top_directors,data=>data.number)])\n                      .range([height-margin.bottom,margin.top]);\n            \n           d3.select(\"#container\").selectAll(\"*\").remove();\n           \n           var svg = d3.select('#container')\n                    .append('svg')\n                    .attr('width', width + margin.left + margin.right)\n                    .attr('height', height + margin.top + margin.bottom)\n                    .style(\"background\",\"grey\");\n    \n            let bars = svg.append(\"g\")\n               .selectAll(\"rect\")\n               .data(top_directors)\n               .join(\"rect\")\n               .attr(\"x\",data=>x_scale(data.name))\n               .attr(\"y\",data=>y_scale(data.number))\n               .attr(\"height\",data=>{return y_scale(0)-y_scale(data.number)})\n               .attr(\"width\",x_scale.bandwidth())\n               .attr(\"fill\",data=>colors(data.number));\n            \n            let captions = svg.append(\"g\")\n               .selectAll(\"text\")\n               .data(top_directors)\n               .join(\"text\")\n               .attr(\"text-anchor\",\"middle\")\n               .attr(\"x\",data=>x_scale(data.name)+x_scale.bandwidth()/2)\n               .attr(\"y\",data=>y_scale(data.number)+15)\n               .text(data=>data.name+\":\"+data.number)\n               .attr(\"font-size\", \"11px\")\n               .attr(\"fill\",\"white\");\n     \n           \n           // create a scatter plot\n        svg.append(\"g\")\n           .attr(\"transform\",\"translate(0,\"+(height-margin.bottom)+\")\")\n           .call(d3.axisBottom(x_scale));\n        svg.append(\"g\")\n           .attr(\"transform\",\"translate(\"+margin.left+\",0)\")\n           .call(d3.axisLeft(y_scale));\n           \n        let legends = svg.append(\"g\")\n           .attr(\"transform\",\"translate(\"+(width-50)+\",0)\")\n           .selectAll(\".category\").data(top_directors);\n    \n        let legend = legends.join(\"g\")\n              .classed(\"category\",true)\n              .attr(\"transform\",(data,index)=>{\n                return \"translate(0,\"+(index+1)*30+\")\";\n     \n            });\n        \n        legend.append(\"rect\")\n            .attr(\"width\",20)\n            .attr(\"height\",20)\n            .attr(\"fill\",data=>colors(data.number));\n    \n        legend.append(\"text\").text(data=>data.name)\n                           .attr(\"font-weight\",\"bold\")\n                           .attr(\"font-family\", \"Saira\")\n                           .attr(\"fill\",data=>colors(data.number))\n                           .attr(\"x\",20)\n                           .attr(\"y\",20);\n        \n        svg.append(\"text\")\n            .attr(\"class\", \"y label\")\n            .attr(\"text-anchor\", \"end\")\n            .attr(\"x\", -40)\n            .attr(\"y\", 10)\n            .attr(\"dy\", \".5em\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .text(\"appearance (times)\")\n            .attr(\"font-size\",\"0.7em\")\n            .attr(\"fill\",\"black\");\n        \n        svg.append(\"text\")\n            .attr(\"class\", \"x label\")\n            .attr(\"text-anchor\", \"end\")\n            .attr(\"x\", width/2)\n            .attr(\"y\", height+margin.bottom/2)\n            .text(\"directors\")\n            .attr(\"font-size\",\"0.7em\")\n            .attr(\"fill\",\"black\");\n\n        });\n\n\n    \n    }\n\n    render(){\n        return (\n        <div id={\"#\" + this.props.id}>\n            <form>\n                <label>\n                Top X directors:\n                <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n                </label>\n            </form>\n            <label>\n                Film location:\n                <select id=\"locations\" value={this.state.location} onChange={this.handleSelect} >\n                    <option>City Hall</option>\n                </select>\n            </label>\n        </div>);\n    }\n}\n\nexport default Sk_BarChart;","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework2/kunhuang/react-template/react-d3/src/data_processing.js",[],["163","164"],"/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework2/kunhuang/react-template/react-d3/src/Sk_PieChart.js",["165","166"],"import React, {Component} from 'react';\nimport * as d3 from \"d3\";\nimport { data_processing,data_cleaning } from './data_processing';\n\nclass Sk_BarChart extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            value: 5\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event){\n        this.setState({\n            value: event.target.value\n        });\n    }\n\n    componentDidMount(){\n        this.drawChart();\n    }\n\n    componentDidUpdate() {\n        this.drawChart();\n    }\n\n    data_pipeline(num, dataset){\n  \n        let data = data_processing(data_cleaning(dataset,[\"Director\"]),[\"Director\"]);\n        let top_5_directors = [];\n        let director_stat = {}\n        data.map(data=>{\n          if(director_stat.hasOwnProperty(data[\"Director\"])){\n            director_stat[data[\"Director\"]]+=1;\n          }else{\n            director_stat[data[\"Director\"]]=1;\n          }\n        });\n        for(let i = 0; i<num; i++){\n          let max_count = -1;\n          let max_director = \"\";\n          for(let prop in director_stat){\n            if(director_stat[prop]>max_count){\n              max_director = prop;\n              max_count = director_stat[prop];\n            }\n          }\n          top_5_directors.push({\n          name:max_director,\n          number:max_count\n          });\n          delete director_stat[max_director];\n        }\n        return top_5_directors;\n    \n      }\n\n\n    drawChart(){\n            // log csv in browser console\n        d3.csv(this.props.data)\n        .then((dataset)=>{\n\n            let top_directors = this.data_pipeline(this.state.value,dataset);\n        \n\n            if(!top_directors){\n                return;\n            }\n\n            let pie_data = d3.pie().sort(null).value(data=>data.number)(top_directors);\n  \n            let colors = d3.scaleSequential().domain([0,d3.max(top_directors,data=>data.number)]).interpolator(d3.interpolateBlues);\n            var width = this.props.width;\n            var height = this.props.height;\n            d3.select('#container_pie').selectAll(\"*\").remove();\n            let svg = d3.select('#container_pie')\n                          .append('svg')\n                          .attr(\"width\",width)\n                          .attr(\"height\",height)\n                          .style(\"background\",\"grey\");\n            let segments = d3.arc()\n                             .innerRadius(0)\n                             .outerRadius(150)\n                             .padAngle(0.05)\n                             .padRadius(50);\n            let g = svg.append(\"g\")\n                      .attr(\"transform\",\"translate(200,200)\")\n                      .selectAll(\"path\")\n                      .data(pie_data)\n                      .join(\"path\")\n                      .attr(\"d\",segments)\n                      .attr(\"fill\",data=>colors(data.data.number));\n                      \n            let caption = svg.select(\"g\")\n                           .selectAll(\"text\")\n                           .data(pie_data);\n            //console.log(svg.select(\"g\").selectAll(\"text\"));\n            caption.join(\"text\").each(function(data){\n            let center = segments.centroid(data);\n            //console.log(this);\n            d3.select(this).attr(\"x\",center[0]-80)\n                           .attr(\"y\",center[1])\n                           .text(data.data.name+\":\"+data.data.number)\n                           .attr(\"font-family\",\"Saira\")\n                           .attr(\"font-weight\",\"bold\")\n                           .attr(\"fill\",\"white\");\n            });\n            let legends = svg.append(\"g\")\n                             .attr(\"transform\",\"translate(400,100)\")\n                             .selectAll(\".category\").data(pie_data);\n            let legend = legends.join(\"g\")\n                                .classed(\"category\",true)\n                                .attr(\"transform\",(data,index)=>{\n                                  return \"translate(0,\"+(index+1)*30+\")\";\n                                });\n            legend.append(\"rect\")\n                  .attr(\"width\",20)\n                  .attr(\"height\",20)\n                  .attr(\"fill\",data=>colors(data.data.number));\n            legend.append(\"text\").text(data=>data.data.name)\n                                 .attr(\"font-weight\",\"bold\")\n                                 .attr(\"font-family\", \"Saira\")\n                                 .attr(\"fill\",data=>colors(data.data.number))\n                                 .attr(\"x\",20)\n                                 .attr(\"y\",20);\n\n        });\n\n    \n    }\n\n    render(){\n        return (\n        <div id={\"#\" + this.props.id}>\n            <form>\n                <label>\n                Top X directors:\n                <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n                </label>\n            </form>\n        </div>);\n    }\n}\n\nexport default Sk_BarChart;","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework2/kunhuang/react-template/react-d3/src/Sk_VoronoiDiagram.js",["167"],"import React, {Component} from 'react';\nimport * as d3 from \"d3\";\nimport { data_processing,data_cleaning } from './data_processing';\n\nclass Sk_VoronoiDiagram extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            radius:25\n        };\n        this.handleChange = this.handleChange.bind(this);\n        \n    }\n\n    handleChange(event){\n        this.setState({\n            radius: event.target.value\n        });\n    }\n\n    componentDidMount(){\n        this.drawChart();\n    }\n\n    componentDidUpdate() {\n        this.drawChart();\n    }\n\n    data_pipeline(dataset){\n  \n        let data = data_processing(data_cleaning(dataset,[\"Director\"]),[\"Director\"]);\n        let directors = {};\n        data.map(data=>{\n            if(directors.hasOwnProperty(data[\"Director\"])){\n                directors[data[\"Director\"]] += 1;\n            }else{\n                directors[data[\"Director\"]] = 1;\n            }\n        });\n\n        let keys = Object.keys(directors);\n        console.log(\"keys\",keys)\n        let results = keys.map(data=>{\n            return {Director:data, appearance:directors[data]}\n        });\n        console.log(\"results\",results)\n\n        return results;\n    \n      }\n\n\n    drawChart(){\n            // log csv in browser console\n        d3.csv(this.props.data)\n        .then((dataset)=>{\n\n            let top_directors = this.data_pipeline(dataset);\n        \n            console.log(\"in voronoi diagram\",top_directors);\n            if(!top_directors){\n                return;\n            }\n            let width = this.props.width;\n            let height = this.props.height;\n            let margin = {left: 50, right: 20, top: 20, bottom: 20}\n\n            d3.select('#container_VoronoiDiagram').selectAll(\"*\").remove();\n            let svg = d3.select('#container_VoronoiDiagram')\n                          .append('svg')\n                          .attr(\"width\",width)\n                          .attr(\"height\",height)\n                          .style(\"background\",\"grey\");\n\n\n\n            let x_scale = d3.scaleBand()\n                            .domain(top_directors.map(data=>data[\"Director\"]))\n                            .rangeRound([margin.left, width - margin.right])\n                            .padding(0.1);\n\n            let y_scale = d3.scaleLinear()\n                            .domain([0,d3.max(top_directors,data=>data[\"appearance\"])])\n                            .range([height-margin.bottom,margin.top]);\n\n            let colors = d3.scaleSequential().domain([0,d3.max(top_directors,data=>data[\"appearance\"])]).interpolator(d3.interpolateBlues);\n\n            let scatterplots = top_directors.map(data=>{\n                return [x_scale(data[\"Director\"]),y_scale(data[\"appearance\"]),data[\"appearance\"],data[\"Director\"]];\n            });\n\n            let delaunay = d3.Delaunay.from(scatterplots,data=>data[0],data=>data[1]);\n            let voronoi = delaunay.voronoi([ 0, 0, width, height ])\n\n            svg.selectAll('path')\n                .data( top_directors.map((d,i) => voronoi.renderCell(i)) )\n                .join('path')\n                .attr('d', data => data)\n                .style(\"fill\",\"grey\")\n                .style('opacity', 0.8)\n                .style('stroke', 'white')\n                .style('stroke-opacity', 1)\n\n            console.log(\"scatterplot\",scatterplots);\n            svg.selectAll(\"text\")\n                .data(scatterplots)\n                .enter()\n                .append(\"text\")\n                .attr(\"transform\",data=>{\n                    return \"translate(\"+data[0]+\",\"+data[1]+\")\";\n                })\n                .style(\"font-size\",data=>{\n                    return this.state.radius+\"px\";\n                })\n                .attr(\"fill\",data=>colors(data[2]))\n                .text(data=>data[3]);\n\n            svg.append(\"g\")\n                .attr(\"transform\",\"translate(\"+margin.left+\",0)\")\n                .call(d3.axisLeft(y_scale))\n                .attr(\"fill\",\"white\")\n                .style(\"color\",\"white\");\n\n            svg.append(\"text\")\n                .attr(\"class\", \"y label\")\n                .attr(\"text-anchor\", \"end\")\n                .attr(\"x\",-(width/2)+2*margin.top)\n                .attr(\"y\", 6)\n                .attr(\"dy\", \".75em\")\n                .attr(\"transform\", \"rotate(-90)\")\n                .text(\"appearances (times)\")\n                .attr(\"fill\",\"white\");\n\n\n        });\n\n    \n    }\n\n    render(){\n        return (\n        <div id={\"#\" + this.props.id}>\n            <form>\n                <label for=\"vol\">voronoi diagram scatterplots font-size(px):</label>\n                <input type=\"range\" min=\"0\" max=\"25\" onChange={this.handleChange}/>\n            </form>\n        </div>);\n    }\n}\n\nexport default Sk_VoronoiDiagram;","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework3/kunhuang/react-template/react-d3/src/index.js",["168","169","170","171"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport data from  './datasets/Film_Locations_in_San_Francisco.csv';\nimport App from './App';\nimport My_Navbar from './My_Navbar';\nimport reportWebVitals from './reportWebVitals';\nimport Sk_BarChart from './Sk_BarChart';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <link\n      rel=\"stylesheet\"\n      href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\"\n      integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\"\n      crossorigin=\"anonymous\"\n    />\n    <link\n      rel=\"stylesheet\"\n      href=\"./index.css\"\n    />\n\n      <My_Navbar/>\n      <div className=\"sk_container\">\n        <div className=\"sk_row\">\n          <div className=\"sk_col\">\n            <div className=\"sk_row\">\n              <h4><b>Context view: Directors and their appearances (brush to get detailed word infos!)</b></h4>\n              <App kind=\"VoronoiDiagram\"/> \n            </div>\n            <div className=\"sk_row\">\n              <h6><b>Sub-context view (toggle on circles and count the appearance sum with color transition! Mouseover for individual detail tooltips!)</b></h6>\n              <h6 id=\"cp_counter\" style={{ width:\"20vw\",fontWeight:'bold',textShadow:'-1px 0 black, 0 1px black, 1px 0 black, 0 -1px black'}}></h6>\n              <div id=\"CirclePlot\"></div>\n            </div>\n\n          </div>\n          <div className=\"sk_col\">\n            <div className=\"sk_row\">\n              <h4><b>Focus view: Top X most popular directors in all film locations</b></h4>\n              <App kind=\"PieChart\"/>\n            </div>\n            <div className=\"sk_row\">\n              <h4><b>Focus view: Top X most popular directors in selected film locations</b></h4>\n              <App kind=\"BarChart\"/>\n            </div>\n          </div>\n        </div>\n      </div>\n\n\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["172","173"],"/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework3/kunhuang/react-template/react-d3/src/My_Navbar.js",[],"/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework3/kunhuang/react-template/react-d3/src/App.js",["174","175","176"],"import React from 'react';\nimport Sk_BarChart from \"./Sk_BarChart\";\nimport Sk_PieChart from \"./Sk_PieChart\";\nimport csv from  './datasets/Film_Locations_in_San_Francisco.csv';\nimport Sk_VoronoiDiagram from './Sk_VoronoiDiagram';\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state ={\n      data: csv\n    };\n\n  }\n\n  render(){\n    if(this.props.kind === \"BarChart\"){\n      return (\n        <div>\n          <div id=\"container\"> \n          </div>\n          <Sk_BarChart data={this.state.data} width={800} height={280} />\n        </div>\n      );\n    }else if(this.props.kind === \"PieChart\"){\n      return (\n        <div>\n          <div id=\"container_pie\"> \n          </div>\n          <Sk_PieChart data={this.state.data} width={800} height={350} />\n        </div>\n      );\n    }else if(this.props.kind === \"VoronoiDiagram\"){\n      return (\n        <div>\n          <div id=\"container_VoronoiDiagram\"> \n          </div>\n          <Sk_VoronoiDiagram data={this.state.data} width={800} height={350} />\n        </div>\n      );\n    }\n    \n    return (\n      <div></div>\n    );\n\n  }\n\n}\n\nexport default App;\n","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework3/kunhuang/react-template/react-d3/src/reportWebVitals.js",[],"/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework3/kunhuang/react-template/react-d3/src/Sk_BarChart.js",["177","178","179","180","181","182"],"import React, {Component} from 'react';\nimport * as d3 from \"d3\";\nimport { data_processing,data_cleaning } from './data_processing';\nimport { sort } from 'd3';\nimport {legendColor} from \"d3-svg-legend\";\n\nclass Sk_BarChart extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            value: 5,\n            location: \"City Hall\",\n            sort:true\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSelect = this.handleSelect.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n\n    handleChange(event){\n        this.setState({\n            value: event.target.value\n        });\n    }\n\n    handleSort(event){\n        this.setState({\n            sort:!this.state.sort\n        });\n    }\n\n    handleSelect(event){\n        this.setState({\n            location:event.target.value\n        });\n    }\n\n    componentDidMount(){\n        this.drawChart();\n    }\n\n    componentDidUpdate() {\n        this.drawChart();\n    }\n\n    data_pipeline(num, location, dataset){\n        let top_directors = [];\n        console.log(\"dataset: \",dataset);\n        let data = data_processing(data_cleaning(dataset,[\"Director\",\"Locations\"]),[\"Director\",\"Locations\"]);\n        \n        let director_stat = {};\n        let locations = new Set();\n        data.map(data=>{\n                locations.add(data[\"Locations\"].trim());\n                if(data[\"Locations\"].trim()!=location.trim()){\n                  return;\n                }\n                if(director_stat.hasOwnProperty(data[\"Director\"])){\n                  director_stat[data[\"Director\"]]+=1;\n                }else{\n                  director_stat[data[\"Director\"]]=1;\n                }\n              });\n        locations.delete(\"City Hall\");\n        d3.select(\"#locations\")\n          .selectAll(\"options\")\n          .data(locations)\n          .enter()\n          .append(\"option\")\n          .attr(\"value\",data=>data)\n          .text(data=>data);\n\n    for(let i = 0; i<num; i++){\n                let max_count = -1;\n                let max_director = \"\";\n                for(let prop in director_stat){\n                  if(director_stat[prop]>max_count){\n                    max_director = prop;\n                    max_count = director_stat[prop];\n                  }\n                }\n                top_directors.push({\n                name:max_director,\n                number:max_count\n                });\n                delete director_stat[max_director];\n            }\n        \n          console.log(top_directors);\n          if(this.state.sort){\n            top_directors.sort((a,b)=>a[\"number\"]-b[\"number\"]);\n          }else{\n            top_directors.sort((a,b)=>b[\"number\"]-a[\"number\"]);             \n          }\n          console.log(this.state.sort);\n\n          return top_directors;\n    \n      }\n\n\n    drawChart(){\n            // log csv in browser console\n        d3.csv(this.props.data)\n        .then((dataset)=>{\n\n            let top_directors = this.data_pipeline(this.state.value,this.state.location,dataset);\n        \n            console.log(\"in drawchart:\",this.state.value);\n            console.log(top_directors);\n            if(!top_directors){\n                return;\n            }\n            console.log(\"in sk_barchart\");\n            console.log(top_directors);\n            let colors = d3.scaleSequential().domain([0,d3.max(top_directors,data=>data.number)]).interpolator(d3.interpolateBlues);\n            \n            \n             /********************************* \n            * Visualization codes start here\n            * ********************************/\n           var width = this.props.width;\n           var height = this.props.height;\n           var margin = {left: 50, right: 85, top: 20, bottom: 20}\n            \n    \n           let x_scale = d3.scaleBand()\n                      .domain(top_directors.map(data=>data.name))\n                      .rangeRound([margin.left, width - margin.right])\n                      .padding(0.1);\n    \n            let y_scale = d3.scaleLinear()\n                      .domain([0,d3.max(top_directors,data=>data.number)])\n                      .range([height-margin.bottom,margin.top]);\n            \n           d3.select(\"#container\").selectAll(\"*\").remove();\n           \n           var svg = d3.select('#container')\n                    .append('svg')\n                    .attr('width', width + margin.left + margin.right)\n                    .attr('height', height + margin.top + margin.bottom)\n                    .style(\"background\",\"grey\");\n    \n            let bars = svg.append(\"g\")\n               .selectAll(\"rect\")\n               .data(top_directors)\n               .join(\"rect\")\n               .attr(\"x\",data=>x_scale(data.name))\n               .attr(\"width\",x_scale.bandwidth())\n               .attr(\"y\",data=>y_scale(0))\n               .attr(\"height\",data=>0)\n               .transition()\n               .duration(2000)\n               .attr(\"y\",data=>y_scale(data.number))\n               .attr(\"height\",data=>{return y_scale(0)-y_scale(data.number)})\n               .attr(\"fill\",data=>colors(data.number));\n            \n            let captions = svg.append(\"g\")\n               .selectAll(\"text\")\n               .data(top_directors)\n               .join(\"text\")\n               .attr(\"text-anchor\",\"middle\")\n               .attr(\"x\",data=>x_scale(data.name)+x_scale.bandwidth()/2)\n               .attr(\"y\",data=>y_scale(data.number)+15)\n               .text(data=>data.name+\":\"+data.number)\n               .attr(\"font-size\", \"11px\")\n               .attr(\"fill\",\"red\");\n     \n           \n           // create a scatter plot\n        svg.append(\"g\")\n           .attr(\"transform\",\"translate(0,\"+(height-margin.bottom)+\")\")\n           .call(d3.axisBottom(x_scale));\n        svg.append(\"g\")\n           .attr(\"transform\",\"translate(\"+margin.left+\",0)\")\n           .call(d3.axisLeft(y_scale));\n           \n        let legends = svg.append(\"g\")\n           .attr(\"transform\",\"translate(\"+(width-90)+\",0)\")\n           .selectAll(\".category\").data(top_directors);\n    \n        let legend = legends.join(\"g\")\n              .classed(\"category\",true)\n              .attr(\"transform\",(data,index)=>{\n                return \"translate(0,\"+((index+1)*30)+\")\";\n     \n            });\n        \n        legend.append(\"rect\")\n            .attr(\"width\",5)\n            .attr(\"height\",15)\n            .attr(\"fill\",data=>colors(data.number));\n    \n        legend.append(\"text\").text(data=>data.name)\n                           .attr(\"font-weight\",\"bold\")\n                           .attr(\"font-family\", \"Saira\")\n                           .attr(\"font-size\",\"0.8em\")\n                           .attr(\"fill\",data=>colors(data.number))\n                           .attr(\"x\",20)\n                           .attr(\"y\",20);\n        \n        svg.append(\"text\")\n            .attr(\"class\", \"y label\")\n            .attr(\"text-anchor\", \"end\")\n            .attr(\"x\", -40)\n            .attr(\"y\", 10)\n            .attr(\"dy\", \".5em\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .text(\"appearance (times)\")\n            .attr(\"font-size\",\"0.7em\")\n            .attr(\"fill\",\"black\");\n        \n        svg.append(\"text\")\n            .attr(\"class\", \"x label\")\n            .attr(\"text-anchor\", \"end\")\n            .attr(\"x\", width/2)\n            .attr(\"y\", height+margin.bottom/2)\n            .text(\"directors\")\n            .attr(\"font-size\",\"0.7em\")\n            .attr(\"fill\",\"black\");\n\n        svg.append(\"g\")\n            .attr(\"class\", \"colorLegend\")\n            .attr(\"transform\", \"translate(\"+(width+45)+\",20)\")\n            .attr(\"fill\",\"black\");\n          \n        var colorlegend = legendColor()\n                .shapeWidth(10)\n                .title(\"appearance range\")\n                .titleWidth(50)\n                .labelFormat(d3.format(\".2f\"))\n                .scale(colors);\n          \n        svg.select(\".colorLegend\")\n            .call(colorlegend);\n\n\n        });\n\n\n    \n    }\n\n    render(){\n        return (\n        <div id={\"#\" + this.props.id}>\n            <form>\n                <label>\n                Top X directors:\n                <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n                </label>\n            </form>\n            <label>\n                Film location:\n                <select id=\"locations\" value={this.state.location} onChange={this.handleSelect} >\n                    <option>City Hall</option>\n                </select>\n            </label>\n            <button onClick={this.handleSort}>sort(ascend/descend)</button>\n        </div>);\n    }\n}\n\nexport default Sk_BarChart;","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework3/kunhuang/react-template/react-d3/src/Sk_PieChart.js",["183","184"],"import React, {Component} from 'react';\nimport * as d3 from \"d3\";\nimport { data_processing,data_cleaning } from './data_processing';\nimport {legendColor} from \"d3-svg-legend\";\n\nclass Sk_BarChart extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            value: 5\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event){\n        this.setState({\n            value: event.target.value\n        });\n    }\n\n    componentDidMount(){\n        this.drawChart();\n    }\n\n    componentDidUpdate() {\n        this.drawChart();\n    }\n\n    data_pipeline(num, dataset){\n  \n        let data = data_processing(data_cleaning(dataset,[\"Director\"]),[\"Director\"]);\n        let top_5_directors = [];\n        let director_stat = {}\n        data.map(data=>{\n          if(director_stat.hasOwnProperty(data[\"Director\"])){\n            director_stat[data[\"Director\"]]+=1;\n          }else{\n            director_stat[data[\"Director\"]]=1;\n          }\n        });\n        for(let i = 0; i<num; i++){\n          let max_count = -1;\n          let max_director = \"\";\n          for(let prop in director_stat){\n            if(director_stat[prop]>max_count){\n              max_director = prop;\n              max_count = director_stat[prop];\n            }\n          }\n          top_5_directors.push({\n          name:max_director,\n          number:max_count\n          });\n          delete director_stat[max_director];\n        }\n        return top_5_directors;\n    \n      }\n\n\n    drawChart(){\n            // log csv in browser console\n        d3.csv(this.props.data)\n        .then((dataset)=>{\n\n            let top_directors = this.data_pipeline(this.state.value,dataset);\n        \n\n            if(!top_directors){\n                return;\n            }\n\n            let pie_data = d3.pie().sort(null).value(data=>data.number)(top_directors);\n  \n            let colors = d3.scaleSequential().domain([0,d3.max(top_directors,data=>data.number)]).interpolator(d3.interpolateBlues);\n            var width = this.props.width;\n            var height = this.props.height;\n            d3.select('#container_pie').selectAll(\"*\").remove();\n            let svg = d3.select('#container_pie')\n                          .append('svg')\n                          .attr(\"width\",width)\n                          .attr(\"height\",height)\n                          .style(\"background\",\"grey\");\n            let segments = d3.arc()\n                             .innerRadius(0)\n                             .outerRadius(150)\n                             .padAngle(0.05)\n                             .padRadius(50);\n\n            let g = svg.append(\"g\")\n                      .attr(\"transform\",\"translate(200,200)\")\n                      .selectAll(\"path\")\n                      .data(pie_data)\n                      .join(\"path\")\n                      .attr(\"d\",segments)\n                      .attr(\"fill\",colors(50))\n                      .transition()\n                      .duration(2000)\n                      .attr(\"fill\",data=>colors(data.data.number));\n                      \n            let caption = svg.select(\"g\")\n                           .selectAll(\"text\")\n                           .data(pie_data);\n            //console.log(svg.select(\"g\").selectAll(\"text\"));\n            caption.join(\"text\").each(function(data){\n            let center = segments.centroid(data);\n            //console.log(this);\n            d3.select(this).attr(\"x\",center[0]-80)\n                           .attr(\"y\",center[1])\n                           .text(data.data.name+\":\"+data.data.number)\n                           .attr(\"font-family\",\"Saira\")\n                           .attr(\"font-weight\",\"bold\")\n                           .attr(\"fill\",\"red\");\n            });\n            let legends = svg.append(\"g\")\n                             .attr(\"transform\",\"translate(\"+(width-400)+\",60)\")\n                             .selectAll(\".category\").data(pie_data);\n            let legend = legends.join(\"g\")\n                                .classed(\"category\",true)\n                                .attr(\"transform\",(data,index)=>{\n                                  return \"translate(0,\"+(index+1)*30+\")\";\n                                });\n            legend.append(\"rect\")\n                  .attr(\"width\",20)\n                  .attr(\"height\",20)\n                  .attr(\"fill\",data=>colors(data.data.number));\n            legend.append(\"text\").text(data=>data.data.name)\n                                 .attr(\"font-weight\",\"bold\")\n                                 .attr(\"font-family\", \"Saira\")\n                                 .attr(\"fill\",data=>colors(data.data.number))\n                                 .attr(\"x\",20)\n                                 .attr(\"y\",20);\n            svg.append(\"g\")\n                .attr(\"class\", \"colorLegend\")\n                .attr(\"transform\", \"translate(\"+(width-400)+\",20)\")\n                .attr(\"fill\",\"black\");\n                               \n            var colorlegend = legendColor().shapeWidth(60)\n                                     .orient('horizontal')\n                                     .title(\"appearance range\")\n                                     .titleWidth(200)\n                                     .labelFormat(d3.format(\".2f\"))\n                                     .scale(colors);\n                               \n            svg.select(\".colorLegend\")\n              .call(colorlegend);\n\n        });\n\n    \n    }\n\n    render(){\n        return (\n        <div id={\"#\" + this.props.id}>\n            <form>\n                <label>\n                Top X directors:\n                <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n                </label>\n            </form>\n        </div>);\n    }\n}\n\nexport default Sk_BarChart;","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework3/kunhuang/react-template/react-d3/src/Sk_VoronoiDiagram.js",["185","186","187"],"import React, {Component} from 'react';\nimport * as d3 from \"d3\";\nimport { data_processing,data_cleaning } from './data_processing';\nimport {legendColor} from \"d3-svg-legend\";\n\n\nclass Sk_VoronoiDiagram extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            radius:10,\n            zoomState: null,\n            circlePlotData:null\n        };\n        this.handleChange = this.handleChange.bind(this);\n        \n    }\n\n    handleChange(event){\n        this.setState({\n            radius: event.target.value\n        });\n    }\n\n\n    componentDidMount(){\n        this.drawChart();\n    }\n\n    componentDidUpdate() {\n        this.drawChart();\n    }\n\n    data_pipeline(dataset){\n  \n        let data = data_processing(data_cleaning(dataset,[\"Director\"]),[\"Director\"]);\n        let directors = {};\n        data.map(data=>{\n            if(directors.hasOwnProperty(data[\"Director\"])){\n                directors[data[\"Director\"]] += 1;\n            }else{\n                directors[data[\"Director\"]] = 1;\n            }\n        });\n\n        let keys = Object.keys(directors);\n        // console.log(\"keys\",keys)\n        let results = keys.map(data=>{\n            return {Director:data, appearance:directors[data]}\n        });\n        // console.log(\"results\",results)\n\n        return results;\n    \n      }\n\n    // handleZoom(state){\n    //     // console.log(\"handle zooming\");\n    //     this.setState({\n    //         zoomState: state\n    //     });\n    // }\n\n    drawCirclePlot(data,colorsCallback){\n        let width = this.props.width;\n        let height = this.props.height;\n        let radius = width/40;\n        d3.select('#CirclePlot').selectAll(\"*\").remove();\n        let svg = d3.select('#CirclePlot')\n                    .append('svg')\n                    .attr(\"width\",width)\n                    .attr(\"height\",height)\n                    .style(\"background\",\"grey\");\n\n        console.log(\"circleplotting\");\n\n        const circles = data.map((data)=>{\n            data[\"cx\"] = Math.random() * (width - radius*2)+radius/4;\n            data[\"cy\"] = Math.random() * (height - radius*2)+radius/4;\n            return data;\n        });\n\n        console.log(\"circles\",circles)\n\n        // svg.append(\"text\")\n        //     .attr(\"transform\",\"translate(50,50)\")\n        //     .attr(\"id\",\"cp_counter\")\n        //     .text(\"Selected Appearances Sum: 0\");\n\n        d3.select(\"#cp_counter\")\n          .text(\"Selected Appearances Sum: 0\")\n          .style(\"color\",\"white\");\n\n        svg.selectAll(\"circle\")\n            .data(circles)\n            .join(\"circle\")\n            .attr(\"cx\",data=>data[\"cx\"])\n            .attr(\"cy\",data=>data[\"cy\"])\n            .attr(\"r\",radius)\n            .attr(\"fill\",data=>data[\"color\"])\n            .attr(\"id\", (data,index)=>{\n                return \"cp\"+index;\n            })\n            .on(\"click\",(event)=>{\n                // d3.select(this).transition()\n                //                .attr(\"fill\", \"black\");\n                const curr_text = d3.select(\"#cp_counter\").text();\n                let split_text = curr_text.split(\":\");\n                if(d3.select(\"#\"+event.target.id).attr(\"stroke\")!=\"rgb(255, 0, 0)\"){\n                    d3.select(\"#\"+event.target.id)\n                    .transition()\n                    .duration(500)\n                    .attr(\"r\",radius*2)\n                    .transition()\n                    .duration(500)\n                    .attr(\"r\",radius)\n                    .attr(\"stroke\", \"red\");\n\n                    let appearance = Number(circles[Number(event.target.id.replace(\"cp\",\"\"))][\"appearance\"]);\n                    d3.select(\"#cp_counter\").text(split_text[0]+\":\"+(Number(split_text[1])+appearance))\n                                            .style(\"color\",colorsCallback((Number(split_text[1])+appearance)));\n                \n                }else{\n                    d3.select(\"#\"+event.target.id)\n                    .transition()\n                    .duration(500)\n                    .attr(\"r\",radius/2)\n                    .transition()\n                    .duration(500)\n                    .attr(\"r\",radius)\n                    .attr(\"stroke\", \"none\");  \n                    // d3.select(\"#cp_counter\").text(split_text[0]+\":\"+(Number(split_text[1])-circles[Number(event.target.id.replace(\"cp\"))][\"appearance\"]));\n                    let appearance = Number(circles[Number(event.target.id.replace(\"cp\",\"\"))][\"appearance\"]);\n                    d3.select(\"#cp_counter\").text(split_text[0]+\":\"+(Number(split_text[1])-appearance))\n                                            .style(\"color\",colorsCallback((Number(split_text[1])-appearance)));\n                }\n                // console.log(d3.select(\"#\"+event.target.id).attr(\"stroke\"));\n\n\n            })\n            .append(\"title\")\n            .text(data=>data[\"director\"]+\":\"+data[\"appearance\"]);\n    }\n\n\n    drawChart(){\n            // log csv in browser console\n        d3.csv(this.props.data)\n        .then((dataset)=>{\n\n            let top_directors = this.data_pipeline(dataset);\n        \n            // console.log(\"in voronoi diagram\",top_directors);\n            if(!top_directors){\n                return;\n            }\n            let width = this.props.width;\n            let height = this.props.height;\n            let margin = {left: 50, right: 20, top: 20, bottom: 20}\n\n\n            d3.select('#container_VoronoiDiagram').selectAll(\"*\").remove();\n            let svg = d3.select('#container_VoronoiDiagram')\n                          .append('svg')\n                          .attr(\"width\",width)\n                          .attr(\"height\",height)\n                          .style(\"background\",\"grey\");\n\n            let names = top_directors.map(data=>{\n                return data[\"Director\"];\n            });\n\n\n            names = [...new Set(names)];\n            // console.log(names);\n\n            let x_scale = d3.scaleLinear()\n                            .domain([0,names.length])\n                            .rangeRound([margin.left, width - margin.right]);\n\n\n\n\n            let y_scale = d3.scaleLinear()\n                            .domain([0,d3.max(top_directors,data=>data[\"appearance\"])])\n                            .range([height-margin.bottom,margin.top]);\n            \n            // if(this.state.zoomState!=null){\n            //     const updated_y_domain = this.state.zoomState.rescaleY(y_scale).domain();\n            //     y_scale.domain(updated_y_domain);\n            //     const updated_x_domain = this.state.zoomState.rescaleX(x_scale).domain();\n            //     x_scale.domain(updated_x_domain);\n            //     console.log(x_scale.domain());\n            //     console.log(y_scale.domain());\n\n            // }\n\n            let colors = d3.scaleSequential().domain([0,d3.max(top_directors,data=>data[\"appearance\"])]).interpolator(d3.interpolateBlues);\n\n            let scatterplots = top_directors.map(data=>{\n                return [x_scale(names.indexOf(data[\"Director\"])),y_scale(data[\"appearance\"]),data[\"appearance\"],data[\"Director\"]];\n            });\n\n            let delaunay = d3.Delaunay.from(scatterplots,data=>data[0],data=>data[1]);\n            let voronoi = delaunay.voronoi([ 0, 0, width, height ]);\n\n            svg.selectAll('path')\n                .data( top_directors.map((d,i) => voronoi.renderCell(i)) )\n                .join('path')\n                .attr('d', data => data)\n                .style(\"fill\",(data,index)=>{\n                    return colors(top_directors[index][\"appearance\"]);\n                })\n                .style('opacity', 0.8)\n                .style('stroke', 'white')\n                .style('stroke-opacity', 1);\n\n            // console.log(\"scatterplot\",scatterplots);\n            let words = svg.selectAll(\"text\")\n                            .data(scatterplots)\n                            .enter()\n                            .append(\"text\")\n                            .attr(\"transform\",data=>{\n                                return \"translate(\"+data[0]+\",\"+data[1]+\")\";\n                            })\n                            .style(\"font-size\",data=>{\n                                return this.state.radius+\"px\";\n                            })\n                            .attr(\"fill\",\"red\")\n                            .style(\"text-anchor\", \"middle\")\n                            .text(data=>data[3]);\n\n\n            svg.append(\"g\")\n                .attr(\"transform\",\"translate(\"+margin.left+\",0)\")\n                .call(d3.axisLeft(y_scale))\n                .attr(\"fill\",\"black\")\n                .style(\"color\",\"black\");\n\n            svg.append(\"text\")\n                .attr(\"class\", \"y label\")\n                .attr(\"text-anchor\", \"end\")\n                .attr(\"x\",-110)\n                .attr(\"y\", 6)\n                .attr(\"dy\", \".75em\")\n                .attr(\"transform\", \"rotate(-90)\")\n                .text(\"appearances (times)\")\n                .attr(\"fill\",\"black\");\n\n            // const zoomi = d3.zoom().on(\"zoom\",(event)=>{\n            //                             //   console.log(\"zomming\");               \n            //                             const zoomState = event.transform;\n            //                             this.handleZoom(zoomState);\n                                        //   console.log(zoomState);\n                                    // });\n\n            let selected = ({selection})=>{\n                if(selection==null){\n\n                    words.attr(\"font-weight\",\"\")\n                }else{\n                    const [[x0, y0], [x1, y1]] = selection;\n                    words.attr(\"font-weight\", ([x, y]) => {\n                      return x0 <= x && x <= x1\n                          && y0 <= y && y <= y1\n                          ? \"bold\" : \"\";\n                    });\n                    words.style(\"font-size\", ([x, y]) => {\n                        return x0 <= x && x <= x1\n                            && y0 <= y && y <= y1\n                            ? (this.state.radius*4) + \"px\": this.state.radius+\"px\";\n                      });\n                    let selected_names = [];\n\n                    for(let i = 0; i < scatterplots.length; i++){\n                        if(x0 <= scatterplots[i][0] && scatterplots[i][0] <= x1 && y0 <= scatterplots[i][1] && scatterplots[i][1] <= y1){\n                            selected_names.push({\n                                director : scatterplots[i][3],\n                                appearance : scatterplots[i][2],\n                                color : colors(scatterplots[i][2])\n                            });\n                        }\n                    }\n                    console.log(selected_names);\n\n\n\n                    this.drawCirclePlot(selected_names,colors);\n\n\n                }\n            }\n\n            const brush = d3.brush()\n                            .filter(event => !event.ctrlKey&&(event.metaKey||event.target.__data__.type!=\"overlay\")&&!event.button)\n                            .on(\"start brush end\",selected);\n\n            svg.append(\"g\")\n                .attr(\"class\",\"brush\")\n                .call(brush)\n                .call(brush.move,[[100,100],[200,200]])\n                .call(g => g.select(\".overlay\").style(\"cursor\",\"default\"));\n\n            // svg.call(zoomi)\n            // this.setState({\n            //     circlePlotData: selected_names\n            // })\n          \n          \n          svg.append(\"g\")\n            .attr(\"class\", \"colorLegend\")\n            .attr(\"transform\", \"translate(\"+(width-320)+\",20)\")\n            .attr(\"fill\",\"black\");\n          \n          var legend = legendColor()\n                .shapeWidth(60)\n                .orient('horizontal')\n                .title(\"appearance range\")\n                .titleWidth(200)\n                .labelFormat(d3.format(\".2f\"))\n                .scale(colors);\n          \n          svg.select(\".colorLegend\")\n            .call(legend);\n\n        });\n\n    \n    }\n\n    render(){\n        return (\n        <div id={\"#\" + this.props.id}>\n            {/* <Sk_CirclePlot data={this.state.circlePlotData} width={this.props.width} height={this.props.height}/> */}\n        </div>);\n    }\n}\n\nexport default Sk_VoronoiDiagram;","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework3/kunhuang/react-template/react-d3/src/data_processing.js",[],"/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework3/kunhuang/react-template/react-d3/src/Sk_CirclePlot.js",["188"],"import React, {Component} from 'react';\nimport * as d3 from \"d3\";\nimport { drag } from 'd3';\n\nclass Sk_CirclePlot extends Component{\n\n    componentDidMount(){\n        this.drawChart();\n    }\n\n    componentDidUpdate() {\n        this.drawChart();\n    }\n\n    drawChart(){\n        \n        let data = this.props.data;\n        if(data == null){\n            return;\n        }\n        let width = this.props.width;\n        let height = this.props.height;\n        let radius = this.props.radius;\n        d3.select('#CirclePlot').selectAll(\"*\").remove();\n        let svg = d3.select('#CirclePlot')\n                    .append('svg')\n                    .attr(\"width\",width)\n                    .attr(\"height\",height)\n                    .style(\"background\",\"grey\");\n\n        const circles = data.map((data)=>{\n            data[\"cx\"] = Math.random() * (width - radius*2);\n            data[\"cy\"] = Math.random() * (height - radius*2);\n            return data;\n        });\n\n        let drag = d3.drag()\n                     .on(\"start\",(event,data)=>{\n                         d3.select(this).raise().attr(\"stroke\",\"black\");\n                     })\n                     .on(\"drag\",(event,data)=>{\n                        d3.select(this).attr(\"cx\", data.cx = event.x)\n                                        .attr(\"cy\", data.cy = event.y);\n                     })\n                     .on(\"end\",(event,data)=>{\n                        d3.select(this).attr(\"stroke\", null);\n                     });\n\n        svg.selectAll(\"circle\")\n            .data(circles)\n            .join(\"circle\")\n            .attr(\"cx\",data=>data[\"cx\"])\n            .attr(\"cy\",data=>data[\"cy\"])\n            .attr(\"r\",radius)\n            .attr(\"fill\",data=>data[\"color\"])\n            .call(drag);\n\n\n    }\n\n    render(){\n        return (\n        <div id={\"#\" + this.props.id}>\n\n        </div>);\n    }\n\n\n}\n\nexport default Sk_CirclePlot;",["189","190"],"/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/index.js",["191"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './reset.css';\nimport reportWebVitals from './reportWebVitals';\nimport {Route, BrowserRouter as Router, Switch} from \"react-router-dom\";\nimport Home from \"./Home\";\nimport Geo from './Geo';\nimport ParallelCoordinate from \"./ParallelCoordinate\";\nimport ImageSKY from \"./ImageSKY\";\nimport Stat_view from \"./Stat_view\";\nimport Stat_view_second from \"./Stat_view_second\";\nimport key from \"./api_key.json\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <link\n      rel=\"stylesheet\"\n      href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\"\n      integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\"\n      crossorigin=\"anonymous\"\n    />\n\n    <link\n      rel=\"stylesheet\"\n      href=\"./index.css\"\n    />\n\n    <Router>\n      <Switch>\n        <Route path = \"/\" exact component={Home}/>\n        <Route path = \"/geoOverview\" component={Geo}/>\n        <Route path = \"/parallelCoordinate\" component={ParallelCoordinate}/>\n        <Route path = \"/imageSky\" component={ImageSKY}/>\n        <Route path = \"/Stat_view\" component={Stat_view}/>\n        <Route path = \"/Stat_view_second\" component={Stat_view_second}/>\n      </Switch>\n    </Router>\n\n\n  </React.StrictMode>,document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["192","193"],"/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/reportWebVitals.js",[],"/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/Home.js",["194"],"import React from 'react';\nimport \"./Home.css\";\n\n\nclass Home extends React.Component{\n  constructor(props){\n    super(props);\n    // this.state ={\n    //   data: csv\n    // };\n\n  }\n\n\n  render(){\n    \n    return (\n      <div className=\"pageLayout\">\n          <div className=\"leftView\" onClick={()=>{\n             window.location.replace(\"/geoOverview\");\n          }}>\n            <header>Geographical context view</header>\n          </div>\n\n          <div className=\"rightView\" onClick={()=>{\n             window.location.replace(\"/parallelCoordinate\");\n          }}>\n            <header>Parallel coordinate view</header>\n          </div>\n\n      </div>\n    );\n\n  }\n\n}\n\nexport default Home;","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/Geo.js",["195"],"import React from 'react';\nimport \"./Geo.css\";\nimport Ggmap from \"./Ggmap\";\n\n\nclass Geo extends React.Component{\n  constructor(props){\n    super(props);\n    // this.state ={\n    //   data: csv\n    // };\n\n  }\n\n\n\n  render(){\n    \n    return (\n    <div className=\"geoPageLayout\">\n      <h1 className=\"header\">GeoOvervew</h1>\n        <Ggmap/>\n    </div>\n    );\n\n  }\n\n}\n\nexport default Geo;\n","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/ParallelCoordinate.js",["196"],"import React from 'react';\nimport \"./ParallelCoordinate.css\";\nimport BarChart4 from \"./BarChart4\";\n\nclass ParallelCoordinate extends React.Component{\n  constructor(props){\n    super(props);\n    // this.state ={\n    //   data: csv\n    // };\n\n  }\n\n  render(){\n    \n    return (\n    <div className=\"PCpageLayout\">\n      <h1 className=\"header\">Parallel Coordinate</h1>\n      <div className=\"PCcontainer\">\n      <a className=\"google_map_home\" href=\"/geoOverview\">Map</a>\n        <div className=\"PC\">\n          <BarChart4/>\n        </div>\n      </div>\n    </div>\n    );\n\n  }\n\n}\n\nexport default ParallelCoordinate;\n","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/ImageSKY.js",["197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212"],"/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/Ggmap.js",["213","214","215","216","217"],"/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/Stat_view.js",["218","219","220"],"import React from 'react';\nimport \"./Stat_view.css\";\nimport * as d3 from \"d3\";\nimport { index } from 'd3';\n\nimport BarChart2 from './BarChart2';\n\n\nclass Stat_view extends React.Component{\n  constructor(props){\n    super(props);\n\n    this.state={\n      width:\"100%\",\n      height:\"100%\"\n    }\n\n  }\n\n\n  get_url_param(){\n    let url = new URL(window.location.href);\n    return {\n        start: url.searchParams.get(\"start\"),\n        iso:url.searchParams.get(\"iso\")\n    };\n  }\n\n\n\n  render(){\n    let url_info = this.get_url_param();\n    let start = url_info[\"start\"];\n    if(start == \"Geo\"){\n        return (\n          <div className=\"GeoSKYPageLayout\">\n          <h1 className=\"header\">Scatter Line</h1>\n          <div className=\"SKYcontainer\">\n            <div className=\"SKY\">\n                <div id=\"tooltip\"></div>\n                <BarChart2 width={this.state.width} height={this.state.height} iso={url_info[\"iso\"]}/>\n            </div>\n            <a className=\"stat_view_home\" href={\"/Stat_view_second?start=Geo&iso=\"+url_info[\"iso\"]}>Next</a>\n          </div>\n        </div>\n\n            );\n    }else{\n        return (\n            <div className=\"PCSKYPageLayout\">\n              <h1 className=\"header\">Scatter Line</h1>\n              <a className=\"stat_view_home\" href={\"/Stat_view_second?start=Parall&iso=\"+url_info[\"iso\"]}>Next</a>\n              <div className=\"SKYcontainer\">\n                <div className=\"SKY\">\n                  <div id=\"tooltip\"></div>\n                  <BarChart2 width={this.state.width} height={this.state.height} iso={url_info[\"iso\"]}/>\n                  </div>\n                </div>\n            </div>\n            );        \n    }\n\n\n  }\n\n}\n\nexport default Stat_view;","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/GetData.js",["221"],"import * as d3 from \"d3\";\nimport data from './datasets/owid-covid-data.csv';\nimport data2 from './datasets/country_vaccinations.csv';\nimport data3 from './datasets/countries_codes_and_coordinates.csv';\nexport var pack = {};\n\nexport function getData_for_country(dpack, iso) {\n\n    var outp = dpack.filter(function (data) {\n\n        return data.iso === iso;\n    });\n\n    return outp\n\n}\n\nexport function getData_old(_callback) {\n\n    pack = require('./datasets/demodata.json');\n\n    _callback()\n\n}\n\nexport async function getData( _callback) {\n    Promise.all([\n        d3.csv(data),\n        d3.csv(data2),\n        d3.csv(data3)\n    ]).then(([csv1, csv2, csvgeo]) => {\n\n        function getnum(x) {\n            var t = Number(x)\n            return (t<=0 || t===null) ? 0 : t\n        }\n        var data = csv1.map(row => {\n            return {\n                iso: row['iso_code'],\n                date: Date.parse(row['date']),\n                total_case: Number(row['total_cases']),\n                total_deaths: Number(row['total_deaths']),\n                new_cases: getnum(Number(row['new_cases'])),\n                new_deaths: getnum(Number(row['new_deaths'])),\n                population: Number(row['population'])\n\n            }\n        })\n        var data2 = csv2.map(row => {\n            return {\n                iso: row['iso_code'],\n                date: Date.parse(row['date']),\n                daily_vaccinated: Number(row['daily_vaccinations']),\n                total_vaccinated: Number(row['total_vaccinations'])\n            }\n        })\n        var datag = csvgeo.map(row => {\n            return {\n                name: row['Country'],\n                iso: row['Alpha-3 code'].substring(2, 5),\n                lat: Number(row['Latitude (average)'].substring(2, row['Latitude (average)'].length - 1)),\n                lng: Number(row['Longitude (average)'].substring(2, row['Longitude (average)'].length - 1))\n            }\n        })\n\n        data2.forEach(function (rv) {\n            var result = data.filter(function (rc) {\n                return rc.iso === rv.iso && rc.date === rv.date;\n            });\n\n            rv.total_case = (result[0] !== undefined) ? result[0].total_case : null;\n            rv.total_deaths = (result[0] !== undefined) ? result[0].total_deaths : null;\n            rv.new_cases = (result[0] !== undefined) ? result[0].new_cases : null;\n            rv.new_deaths = (result[0] !== undefined) ? result[0].new_deaths : null;\n            rv.population = (result[0] !== undefined) ? result[0].population : null;\n\n            var result = datag.filter(function (rc) {\n                return rc.iso === rv.iso;\n            });\n            rv.name = (result[0] !== undefined) ? result[0].name : null;\n            rv.lng = (result[0] !== undefined) ? result[0].lng : null;\n            rv.lat = (result[0] !== undefined) ? result[0].lat : null;\n        });\n\n        //console.log(data2);\n        // console.log(data)\n        /**\n         var filtered = data.filter(function (el) {\n                    return (el.gname != \"Unknown\");\n                });\n         */\n        var holderC = {};\n        var holderD = {};\n\n        data.forEach(function (d) {\n            if (holderC.hasOwnProperty(d.iso)) {\n                holderC[d.iso] = holderC[d.iso] + d.new_cases;\n            } else {\n                holderC[d.iso] = d.new_cases;\n            }\n            if (holderD.hasOwnProperty(d.gname)) {\n                holderD[d.iso] = holderD[d.iso] + d.new_deaths;\n            } else {\n                holderD[d.iso] = d.new_deaths;\n            }\n        });\n\n        var filteredC = [];\n\n        datag.forEach(function (d) {\n            filteredC.push({\n                name: d.name,\n                iso: d.iso,\n                population:(data.find(x => x.iso === d.iso) !== undefined) ? data.find(x => x.iso === d.iso).population : 0,\n                total_deaths:holderD[d.iso],\n                total_case: holderC[d.iso],\n                total_vac: (data2.find(x => x.iso === d.iso) !== undefined) ? data2.reverse().find(x => x.iso === d.iso).total_vaccinated : 0,\n                lat: d.lat,\n                lng: d.lng\n            });\n        })\n        data.reverse()\n        data2.reverse()\n        filteredC = filteredC.filter(function (rc) {\n            return rc.total_case !== undefined && rc.population !== 0;\n        });\n        //console.log(filteredC)\n        filteredC.forEach(function (d) {\n            var l = []\n\n            filteredC.forEach(function (d1) {\n\n                l.push({iso: d1.iso, dis: Math.sqrt(Math.pow(d1.lat - d.lat, 2) + Math.pow(d1.lng - d.lng, 2))})\n            })\n            l = l.sort(function (a, b) {\n                return a.dis - b.dis\n            }).slice(1, 6)\n            //console.log(l)\n            d.close = l\n        })\n\n        //console.log(filteredC);\n\n        //data = filtered2\n        console.log(\"good\");\n\n        data2 = data2.filter(function (data) {\n            return data.date !== null && data.iso !== \"\";\n        });\n        /**\n        var c = datag[Math.floor(Math.random() * Math.floor(datag.length))].iso\n        while (filteredC.find(x => x.iso === c) === undefined || filteredC.find(x => x.iso === c).total_case === 0) {\n            c = datag[Math.floor(Math.random() * Math.floor(datag.length))].iso;\n        }\n\n        var c = get_iso\n\n        data = data2.filter(function (data) {\n\n            return data.iso === c;\n        });\n         */\n        data = data2\n\n        //console.log(data)\n        data.sort((a, b) => a.date - b.date || a.iso - b.iso)\n        pack = {data: data, CList: filteredC}\n        console.log(pack);\n\n        _callback();\n    })\n\n}\n","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/BarChart2.js",["222","223","224","225","226","227"],"import React, {Component} from 'react';\nimport * as d3 from \"d3\";\nimport {getData_old, getData_for_country, pack} from \"./GetData.js\"\n\n\nclass BarChart2 extends Component {\n\n    componentDidMount() {\n        this.drawChart(this.props.iso);\n    }\n\n\n    drawChart(iso) {\n        //getData1();\n\n        getData_old(function () {\n            console.log('loading finished');\n            var datapack = pack\n            var data = getData_for_country(pack.data,iso);\n            var CList = datapack.CList\n            var c = iso\n            //console.log(d3.max(pack.CList, d => d.total_vac/d.population))\n            /*********************************\n             * Visualization codes start here\n             * *******************************/\n            var width = 1600;\n            var height = 600;\n            var margin = {left: 80, right: 80, top: 60, bottom: 50}\n\n            var svg = d3.select('.SKY')\n                .append('svg')\n                .attr('width', width + margin.left + margin.right)\n                .attr('height', height + margin.top + margin.bottom)\n\n            var view = svg.append(\"g\")\n                .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n\n            var x = d3.scaleTime()\n                .domain([d3.min(data, d => d.date), d3.max(data, d => d.date)])\n                .range([0, width]);\n\n            var y = d3.scaleLinear()\n                .domain([0,  Math.max(d3.max(data,d => d.total_case),d3.max(data,d => d.total_vaccinated),d3.max(data,d => d.daily_vaccinated))])\n                .range([height, 0]);\n\n            var tooltip = document.getElementById('tooltip')\n            // create a scatter plot\n            tooltip.innerHTML = ('Currently displaying country is:' + CList.find(x => x.iso === c).name);\n\n            var scatterPlot2 = view.append(\"g\")\n                .selectAll(\"dot\")\n                .data(data)\n                .enter()\n                .append(\"circle\")\n                .attr(\"cx\", function (d) {\n                    return x(d.date)\n                })\n                .attr(\"cy\", function (d) {\n                    return y(d.total_case)\n                })\n                .attr(\"r\", 8)\n                .attr(\"fill\", \"orange\")\n                .attr('opacity', 0.8)\n\n            var scatterPlot = view.append(\"g\")\n                .selectAll(\"dot\")\n                .data(data)\n                .enter()\n                .append(\"circle\")\n                .attr(\"cx\", function (d) {\n                    return x(d.date)\n                })\n                .attr(\"cy\", function (d) {\n                    return y(d.total_deaths)\n                })\n                .attr(\"r\", 8)\n                .attr(\"fill\", \"red\")\n                .attr('opacity', 0.8)\n\n            var scatterPlot3 = view.append(\"g\")\n                .selectAll(\"dot\")\n\n                .data(data)\n                .enter()\n                .append(\"circle\")\n                .attr(\"cx\", function (d) {\n                    return x(d.date)\n                })\n                .attr(\"cy\", function (d) {\n                    return y(d.daily_vaccinated)\n                })\n                .attr(\"r\", 8)\n                .attr(\"fill\", \"blue\")\n                .attr('opacity', 0.8)\n\n            var scatterPlot4 = view.append(\"g\")\n\n                .selectAll(\"dot\")\n                .data(data)\n                .enter()\n                .append(\"circle\")\n                .attr(\"cx\", function (d) {\n                    return x(d.date)\n                })\n                .attr(\"cy\", function (d) {\n                    return y(d.total_vaccinated)\n                })\n                .attr(\"r\", 8)\n                .attr(\"fill\", \"green\")\n                .attr('opacity', 0.8)\n\n\n            // Function that is triggered when brushing is performed\n            function updateChart(event) {\n                var extent = event.selection\n                var t1 = 0;\n                var t2 = 0;\n                var t3 = 0;\n                var t4 = 0;\n\n                if (brush.empty()) {\n                    t1 = 0;\n                    t2 = 0;\n                    t3 = 0;\n                    t4 = 0;\n                    tooltip.innerHTML = ('brush dots to show accumulative data');\n                } else {\n\n                    data.forEach(function (d) {\n                        if (isBrushed(extent, x(d.date), y(d.total_deaths)))\n                            t1 += d.total_deaths;\n                        if (isBrushed(extent, x(d.date), y(d.total_case)))\n                            t2 += d.total_case;\n                        if (isBrushed(extent, x(d.date), y(d.daily_vaccinated)))\n                            t3 += d.daily_vaccinated;\n                    });\n                    tooltip.innerHTML = (\"In the selected dots, the number of confirmed case is \" + t1 + \", the number of dead cases is \" + t2 + \"<br />The ratio is \" + (t1 / t2).toFixed(2) + \" to 1\" +\"<br />\" +\n                        \"newely vaccinated \" + t3 + \" people\");\n                    //console.log(t)\n                    scatterPlot.classed(\"selected\", function (d) {\n                        return isBrushed(extent, x(d.date), y(d.total_deaths))\n                    })\n                    scatterPlot2.classed(\"selected\", function (d) {\n                        return isBrushed(extent, x(d.date), y(d.total_case))\n                    })\n                    scatterPlot3.classed(\"selected\", function (d) {\n                        return isBrushed(extent, x(d.date), y(d.total_case))\n                    })\n                    scatterPlot4.classed(\"selected\", function (d) {\n                        return isBrushed(extent, x(d.date), y(d.total_case))\n                    })\n                }\n\n\n            }\n\n            // A function that return TRUE or FALSE according if a dot is in the selection or not\n            function isBrushed(brush_coords, cx, cy) {\n                if (brush_coords === null) {\n                    return false\n                }\n                var x0 = brush_coords[0][0],\n                    x1 = brush_coords[1][0],\n                    y0 = brush_coords[0][1],\n                    y1 = brush_coords[1][1];\n                return x0 <= cx && cx <= x1 && y0 <= cy && cy <= y1;    // This return TRUE or FALSE depending on if the points is in the selected area\n            }\n\n\n            var l1 = view.append(\"path\")\n                .datum(data)\n                .attr(\"fill\", \"none\")\n                .attr(\"stroke\", \"black\")\n                .attr(\"stroke-width\", 2)\n                .attr(\"stroke-dasharray\", \"10,3\")\n                .attr(\"stroke-linecap\", \"round\")\n                .attr('opacity', 0.8)\n                .attr(\"d\", d3.line()\n                    .defined(function (d) { return d.total_deaths !== 0; })\n                    .x(function (d) {\n                        return x(d.date)\n                    })\n                    .y(function (d) {\n                        return y(d.total_deaths)\n                    })\n                )\n            var l2 = view.append(\"path\")\n                .datum(data)\n                .attr(\"fill\", \"none\")\n                .attr(\"stroke\", \"gray\")\n                .attr(\"stroke-width\", 2)\n                .attr(\"stroke-dasharray\", \"5,3\")\n                .attr(\"stroke-linecap\", \"round\")\n                .attr('opacity', 0.8)\n                .attr(\"d\", d3.line()\n                    .defined(function (d) { return d.total_case !== 0; })\n                    .x(function (d) {\n                        return x(d.date)\n                    })\n                    .y(function (d) {\n                        return y(d.total_case)\n                    })\n                )\n            var l3 = view.append(\"path\")\n                .datum(data)\n                .attr(\"fill\", \"none\")\n                .attr(\"stroke\", \"gray\")\n                .attr(\"stroke-width\", 2)\n                .attr(\"stroke-dasharray\", \"5,3\")\n                .attr(\"stroke-linecap\", \"round\")\n                .attr('opacity', 0.8)\n                .attr(\"d\", d3.line()\n                    .defined(function (d) { return d.daily_vaccinated !== 0; })\n                    .x(function (d) {\n                        return x(d.date)\n                    })\n                    .y(function (d) {\n                        return y(d.daily_vaccinated)\n                    })\n                )\n            var l4 = view.append(\"path\")\n\n                .datum(data)\n                .attr(\"fill\", \"none\")\n                .attr(\"stroke\", \"gray\")\n                .attr(\"stroke-width\", 2)\n                .attr(\"stroke-dasharray\", \"5,3\")\n                .attr(\"stroke-linecap\", \"round\")\n                .attr('opacity', 0.8)\n                .attr(\"d\", d3.line()\n                    .defined(function (d) { return d.total_vaccinated !== 0; })\n                    .x(function (d) {\n                        return x(d.date)\n                    })\n                    .y(function (d) {\n                        return y(d.total_vaccinated)\n                    })\n                )\n            // x axis\n            view.append(\"g\")\n                .attr(\"transform\", \"translate(0,\" + height + \")\")\n                .call(d3.axisBottom(x).ticks(10))\n                .append(\"text\")\n                .attr(\"fill\", \"#000\")\n                .attr(\"x\", width / 2)\n                .attr('y', margin.bottom / 2)\n                .attr(\"dy\", \"0.71em\")\n                .attr(\"text-anchor\", \"end\")\n                .text(\"Date\");\n\n            // y axis\n            view.append(\"g\")\n                .call(d3.axisLeft(y).ticks(10))\n                .append(\"text\")\n                .attr(\"fill\", \"#000\")\n                .attr(\"transform\", \"rotate(-90)\")\n                .attr(\"x\", -height / 2)\n                .attr(\"y\", -margin.left)\n                .attr(\"dy\", \"0.71em\")\n                .attr(\"text-anchor\", \"end\")\n                .text(\"Number of Cases\");\n            var brush = view\n                .call(d3.brush()\n                    .extent([[-10, -10], [1610, 610]])\n                    .on(\"end\", updateChart)\n                )\n\n        });\n    //getData(()=>(console.log('aaaa')))\n    }\n\n\n\n\n    render() {\n        return <div id={\"#\" + this.props.id}></div>\n    }\n}\n\nexport default BarChart2;","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/Stat_view_second.js",["228","229","230"],"import React from 'react';\nimport \"./Stat_view.css\";\nimport * as d3 from \"d3\";\nimport { index } from 'd3';\n\nimport BarChart3 from './BarChart3';\n\n\nclass Stat_view_second extends React.Component{\n  constructor(props){\n    super(props);\n\n    this.state={\n      width:\"100%\",\n      height:\"100%\"\n    }\n\n  }\n\n\n  get_url_param(){\n    let url = new URL(window.location.href);\n    return {\n        start: url.searchParams.get(\"start\"),\n        iso:url.searchParams.get(\"iso\")\n    };\n  }\n\n\n\n  draw_sk_tetris(){\n\n\n  }\n\n\n\n  render(){\n    let url_info = this.get_url_param();\n    let start = url_info[\"start\"];\n    if(start == \"Geo\"){\n        return (\n          <div className=\"GeoSKYPageLayout\">\n          <h1 className=\"header\">Bar Chart</h1>\n          <div className=\"SKYcontainer\">\n            <div className=\"SKY\">\n                <div id=\"tooltip2\"></div>\n                <BarChart3 width={this.state.width} height={this.state.height} iso={url_info[\"iso\"]}/>\n            </div>\n\n\n          </div>\n        </div>\n\n            );\n    }else{\n        return (\n            <div className=\"PCSKYPageLayout\">\n              <h1 className=\"header\">Bar Chart</h1>\n              <div className=\"SKYcontainer\">\n                <div className=\"SKY\">\n                  <div id=\"tooltip2\"></div>\n                  <BarChart3 width={this.state.width} height={this.state.height} iso={url_info[\"iso\"]}/>\n                </div>\n              </div>\n            </div>\n            );        \n    }\n\n\n  }\n\n}\n\nexport default Stat_view_second;","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/BarChart3.js",["231","232","233"],"import React, {Component} from 'react';\nimport * as d3 from \"d3\";\nimport {getData_old, getData_for_country, pack} from \"./GetData\";\n\nclass BarChart3 extends Component {\n\n    componentDidMount() {\n        this.drawChart(this.props.iso);\n    }\n\n    drawChart(iso) {\n        getData_old(function () {\n\n            // log csv in browser console\n            //console.log(csv);\n            var filtered = []\n\n            // create data by selecting two columns from csv\n            var temp = pack.CList.find(x => x.iso === iso)\n            filtered.push({\n                name: temp.name,\n                total_case: temp.total_case,\n                total_deaths: temp.total_deaths,\n                total_vac: temp.total_vac\n            })\n\n            var rawdata = pack.CList.find(x => x.iso === iso).close\n\n            console.log(rawdata)\n\n\n            rawdata.forEach(function (d) {\n                filtered.push({\n                    name: pack.CList.find(x => x.iso === d.iso).name,\n                    total_case: pack.CList.find(x => x.iso === d.iso).total_case,\n                    total_deaths: pack.CList.find(x => x.iso === d.iso).total_deaths,\n                    total_vac: pack.CList.find(x => x.iso === d.iso).total_vac\n                })\n            });\n            console.log(filtered)\n\n            /*********************************\n             * Visualization codes start here\n             * ********************************/\n            var width = 600;\n            var height = 600;\n            var margin = {left: 80, right: 80, top: 60, bottom: 50}\n\n            var svg = d3.select('.SKY')\n                .append('svg')\n                .attr('width', width + margin.left + margin.right)\n                .attr('height', height + margin.top + margin.bottom)\n\n            var view = svg.append(\"g\")\n                .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n\n            var tooltip2 = document.getElementById('tooltip2')\n\n\n            update();\n\n\n            function update() {\n                console.log('good')\n                tooltip2.innerHTML = ('Hover over histogram to show accurate data');\n\n                var kn = 0;\n                var wn = 0;\n                view.selectAll(\"rect\").remove()\n                view.selectAll(\"g\").remove()\n                var data = filtered\n                // X axis\n                var x = d3.scaleBand()\n                    .range([0, width])\n                    .domain(data.map(function (d) {\n                        return d.name;\n                    }))\n                    .padding(0.2)\n\n                view.append(\"g\")\n                    .attr(\"transform\", \"translate(0,\" + height + \")\")\n                    .call(d3.axisBottom(x))\n                    .selectAll(\"text\")\n                    .style(\"text-anchor\", \"middle\")\n                    .attr(\"transform\", \"translate(0,5)rotate(-13)\")\n\n\n                var y = d3.scaleLinear()\n                    .domain([0, d3.max(data, d => d.total_case)])\n                    .range([height, 0]);\n\n\n                view.append(\"g\")\n                    .call(d3.axisLeft(y).ticks(10))\n\n                    .append(\"text\")\n                    .attr(\"fill\", \"#000\")\n                    .attr(\"transform\", \"rotate(-90)\")\n                    .attr(\"x\", -height / 2)\n                    .attr(\"y\", -margin.left)\n                    .attr(\"dy\", \"0.71em\")\n                    .attr(\"text-anchor\", \"end\")\n                    .text(\"Number of cases\");\n\n                var bar1 = view.selectAll(\"mybar\")\n                    .data(data)\n                    .enter()\n                    .append(\"rect\")\n                    .attr(\"x\", d => {\n                        return x(d.name);\n                    })\n                    .attr(\"y\", 400)\n\n                    .attr(\"width\", x.bandwidth() - 10)\n                    .attr(\"height\", 1)\n                    .attr(\"fill\", \"red\")\n                    .attr('opacity', 0.5)\n                    .attr(\"transform\", \"translate(-5,0)\")\n                    .on(\"mouseover\", function (event, d) {\n                        //console.log(event);\n                        d3.select(this)\n                            .transition()\n                            .duration(500)\n                            .style('fill', 'black')\n                        tooltip2.innerHTML = ('In ' + d.name + ',  ' + d.total_case + ' cases are confirmed');\n                    })\n                    .on(\"mouseout\", function (d) {\n                        d3.select(this)\n                            .transition()\n                            .duration(500)\n                            .style('fill', 'red')\n                        tooltip2.innerHTML = ('Hover over histogram to show accurate data');\n                    })\n\n                bar1\n                    .transition()\n                    .duration(2000)\n                    .attr(\"height\", d => {\n                        return height - y(d.total_case)\n                    })\n                    .attr(\"y\", d => {\n                        return y(d.total_case);\n\n                    })\n\n                var bar2 = view.selectAll(\"mybar2\")\n                    .data(data)\n                    .enter()\n                    .append(\"rect\")\n                    .attr(\"x\", d => {\n                        return x(d.name);\n                    })\n                    .attr(\"y\", 400)\n                    .attr(\"width\", x.bandwidth() - 10)\n                    .attr(\"height\", 1)\n\n                    .attr(\"fill\", \"orange\")\n                    .attr('opacity', 0.5)\n                    .attr(\"transform\", \"translate(5,0)\")\n                    .on(\"mouseover\", function (event, d) {\n                        //console.log(event);\n                        d3.select(this)\n                            .transition()\n                            .duration(500)\n                            .style('fill', 'black')\n                        tooltip2.innerHTML = ('In ' + d.name + ', ' + d.total_vac + ' people are vaccinated');\n                    })\n                    .on(\"mouseout\", function (d) {\n                        d3.select(this)\n                            .transition()\n                            .duration(500)\n                            .style('fill', 'orange')\n                        tooltip2.innerHTML = ('Hover over histogram to show accurate data');\n                    })\n\n                bar2\n                    .transition()\n                    .duration(2000)\n                    .attr(\"height\", d => {\n                        return height - y(d.total_vac);\n                    })\n                    .attr(\"y\", d => {\n                        return y(d.total_vac);\n                    })\n\n            }\n\n\n\n        });\n\n    }\n\n    render() {\n        return <div id={\"#\" + this.props.id}></div>\n    }\n}\n\nexport default BarChart3;","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/BarChart4.js",["234","235"],"import React, {Component} from 'react';\nimport * as d3 from \"d3\";\nimport {getData_old,pack} from \"./GetData\";\n\nclass BarChart4 extends Component {\n\n    componentDidMount() {\n        this.drawChart();\n    }\n\n    drawChart() {\n        getData_old(function () {\n\n                // create data by selecting two columns from csv\n\n               var data = pack.CList\n\n                /*********************************\n                 * Visualization codes start here\n                 * ********************************/\n                var width = 1000;\n                var height = 700;\n                var margin = {left: 10, right: 10, top: 40, bottom: 40}\n\n                var svg = d3.select('.PC')\n                    .append('svg')\n                    .attr('width', width + margin.left + margin.right)\n                    .attr('height', height + margin.top + margin.bottom)\n\n                var view = svg.append(\"g\")\n                    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n                var i = 0\n                data.forEach(function (rv) {\n                    rv.index =i++}\n\n                )\n               console.log(data);\n\n                var dimensions = [\n                    'index',\n                    'total_vac',\n                    'total_case',\n                    'total_deaths',\n                    ];\n\n                var y = {}\n                var i = 0;\n\n                for (i in dimensions) {\n                    var name = dimensions[i]\n                  //  console.log(name)\n                    y[name] = d3.scaleLinear()\n                        .domain(d3.extent(data, d => {\n                            return d[name];\n                        }))\n                        .range([height, 0])\n\n                }\n\n                var x = d3.scalePoint()\n                    .range([0, width])\n                    .padding(1)\n                    .domain(dimensions);\n\n                function path(d) {\n                    return d3.line()(dimensions.map(d1 => {\n                        return [x(d1), y[d1](d[d1])];\n                    }));\n                }\n\n                view\n                    .selectAll(\"myPath\")\n                    .data(data)\n                    .enter().append(\"path\")\n                    .attr(\"d\", path)\n                    .style(\"fill\", \"none\")\n                    .style(\"stroke\", d => {\n                        var cs = d3.scaleLinear()\n                            .domain([0, 50000, 200000])\n                            .range([\"lightyellow\", \"red\", \"black\"]);\n\n                        return cs(d.total_case)\n                    })\n                    .style(\"opacity\", 0.1)\n                    .attr(\"stroke-width\", 2)\n                    .attr(\"stroke-linecap\", \"round\")\n\n                view.selectAll(\"myAxis\")\n                    .data(dimensions).enter()\n                    .append(\"g\")\n                    .attr(\"transform\", d => {\n                        return \"translate(\" + x(d) + \")\";\n                    })\n                    .each(function (d) {\n\n                            d3.select(this).call(d3.axisLeft().scale(y[d]));\n\n\n                    })\n\n                    .append(\"text\")\n                    .style(\"text-anchor\", \"middle\")\n                    .attr(\"y\", -10)\n                    .text(function (d) {\n                        console.log(d)\n                        return d;\n                    })\n                    .style(\"fill\", \"black\")\n\n            });\n\n    }\n\n    render() {\n        return <div id={\"#\" + this.props.id}></div>\n    }\n}\n\nexport default BarChart4;",{"ruleId":"236","severity":1,"message":"237","line":4,"column":8,"nodeType":"238","messageId":"239","endLine":4,"endColumn":12},{"ruleId":"236","severity":1,"message":"240","line":8,"column":8,"nodeType":"238","messageId":"239","endLine":8,"endColumn":19},{"ruleId":"241","severity":1,"message":"242","line":23,"column":7,"nodeType":"243","endLine":23,"endColumn":19},{"ruleId":"244","replacedBy":"245"},{"ruleId":"246","replacedBy":"247"},{"ruleId":"241","severity":1,"message":"248","line":23,"column":11,"nodeType":"243","endLine":23,"endColumn":74},{"ruleId":"241","severity":1,"message":"249","line":31,"column":11,"nodeType":"243","endLine":31,"endColumn":74},{"ruleId":"241","severity":1,"message":"250","line":39,"column":11,"nodeType":"243","endLine":39,"endColumn":80},{"ruleId":"251","severity":1,"message":"252","line":44,"column":22,"nodeType":"253","messageId":"254","endLine":44,"endColumn":24},{"ruleId":"255","severity":1,"message":"256","line":46,"column":44,"nodeType":"257","messageId":"258","endLine":46,"endColumn":46},{"ruleId":"251","severity":1,"message":"259","line":47,"column":19,"nodeType":"260","messageId":"261","endLine":47,"endColumn":26},{"ruleId":"236","severity":1,"message":"262","line":128,"column":17,"nodeType":"238","messageId":"239","endLine":128,"endColumn":21},{"ruleId":"236","severity":1,"message":"263","line":138,"column":17,"nodeType":"238","messageId":"239","endLine":138,"endColumn":25},{"ruleId":"244","replacedBy":"264"},{"ruleId":"246","replacedBy":"265"},{"ruleId":"251","severity":1,"message":"259","line":34,"column":22,"nodeType":"253","messageId":"266","endLine":34,"endColumn":24},{"ruleId":"236","severity":1,"message":"267","line":89,"column":17,"nodeType":"238","messageId":"239","endLine":89,"endColumn":18},{"ruleId":"251","severity":1,"message":"259","line":34,"column":22,"nodeType":"253","messageId":"266","endLine":34,"endColumn":24},{"ruleId":"236","severity":1,"message":"237","line":4,"column":8,"nodeType":"238","messageId":"239","endLine":4,"endColumn":12},{"ruleId":"236","severity":1,"message":"240","line":8,"column":8,"nodeType":"238","messageId":"239","endLine":8,"endColumn":19},{"ruleId":"241","severity":1,"message":"242","line":24,"column":7,"nodeType":"243","endLine":24,"endColumn":19},{"ruleId":"268","severity":1,"message":"269","line":34,"column":15,"nodeType":"243","endLine":34,"endColumn":143},{"ruleId":"244","replacedBy":"270"},{"ruleId":"246","replacedBy":"271"},{"ruleId":"241","severity":1,"message":"248","line":23,"column":11,"nodeType":"243","endLine":23,"endColumn":74},{"ruleId":"241","severity":1,"message":"249","line":31,"column":11,"nodeType":"243","endLine":31,"endColumn":74},{"ruleId":"241","severity":1,"message":"250","line":39,"column":11,"nodeType":"243","endLine":39,"endColumn":80},{"ruleId":"236","severity":1,"message":"272","line":4,"column":10,"nodeType":"238","messageId":"239","endLine":4,"endColumn":14},{"ruleId":"251","severity":1,"message":"252","line":54,"column":22,"nodeType":"253","messageId":"254","endLine":54,"endColumn":24},{"ruleId":"255","severity":1,"message":"256","line":56,"column":44,"nodeType":"257","messageId":"258","endLine":56,"endColumn":46},{"ruleId":"251","severity":1,"message":"259","line":57,"column":19,"nodeType":"260","messageId":"261","endLine":57,"endColumn":26},{"ruleId":"236","severity":1,"message":"262","line":145,"column":17,"nodeType":"238","messageId":"239","endLine":145,"endColumn":21},{"ruleId":"236","severity":1,"message":"263","line":159,"column":17,"nodeType":"238","messageId":"239","endLine":159,"endColumn":25},{"ruleId":"251","severity":1,"message":"259","line":35,"column":22,"nodeType":"253","messageId":"266","endLine":35,"endColumn":24},{"ruleId":"236","severity":1,"message":"267","line":91,"column":17,"nodeType":"238","messageId":"239","endLine":91,"endColumn":18},{"ruleId":"251","severity":1,"message":"259","line":39,"column":22,"nodeType":"253","messageId":"266","endLine":39,"endColumn":24},{"ruleId":"255","severity":1,"message":"256","line":110,"column":65,"nodeType":"257","messageId":"258","endLine":110,"endColumn":67},{"ruleId":"255","severity":1,"message":"256","line":296,"column":104,"nodeType":"257","messageId":"258","endLine":296,"endColumn":106},{"ruleId":"236","severity":1,"message":"273","line":3,"column":10,"nodeType":"238","messageId":"239","endLine":3,"endColumn":14},{"ruleId":"244","replacedBy":"274"},{"ruleId":"246","replacedBy":"275"},{"ruleId":"236","severity":1,"message":"276","line":12,"column":8,"nodeType":"238","messageId":"239","endLine":12,"endColumn":11},{"ruleId":"244","replacedBy":"277"},{"ruleId":"246","replacedBy":"278"},{"ruleId":"279","severity":1,"message":"280","line":6,"column":3,"nodeType":"281","messageId":"282","endLine":12,"endColumn":4},{"ruleId":"279","severity":1,"message":"280","line":7,"column":3,"nodeType":"281","messageId":"282","endLine":13,"endColumn":4},{"ruleId":"279","severity":1,"message":"280","line":6,"column":3,"nodeType":"281","messageId":"282","endLine":12,"endColumn":4},{"ruleId":"236","severity":1,"message":"283","line":4,"column":10,"nodeType":"238","messageId":"239","endLine":4,"endColumn":15},{"ruleId":"255","severity":1,"message":"284","line":12,"column":26,"nodeType":"257","messageId":"258","endLine":12,"endColumn":28},{"ruleId":"255","severity":1,"message":"284","line":18,"column":50,"nodeType":"257","messageId":"258","endLine":18,"endColumn":52},{"ruleId":"255","severity":1,"message":"284","line":363,"column":14,"nodeType":"257","messageId":"258","endLine":363,"endColumn":16},{"ruleId":"255","severity":1,"message":"284","line":384,"column":89,"nodeType":"257","messageId":"258","endLine":384,"endColumn":91},{"ruleId":"255","severity":1,"message":"284","line":385,"column":82,"nodeType":"257","messageId":"258","endLine":385,"endColumn":84},{"ruleId":"255","severity":1,"message":"284","line":386,"column":88,"nodeType":"257","messageId":"258","endLine":386,"endColumn":90},{"ruleId":"255","severity":1,"message":"284","line":387,"column":89,"nodeType":"257","messageId":"258","endLine":387,"endColumn":91},{"ruleId":"255","severity":1,"message":"284","line":388,"column":82,"nodeType":"257","messageId":"258","endLine":388,"endColumn":84},{"ruleId":"255","severity":1,"message":"284","line":389,"column":84,"nodeType":"257","messageId":"258","endLine":389,"endColumn":86},{"ruleId":"255","severity":1,"message":"284","line":428,"column":93,"nodeType":"257","messageId":"258","endLine":428,"endColumn":95},{"ruleId":"255","severity":1,"message":"284","line":429,"column":86,"nodeType":"257","messageId":"258","endLine":429,"endColumn":88},{"ruleId":"255","severity":1,"message":"284","line":430,"column":88,"nodeType":"257","messageId":"258","endLine":430,"endColumn":90},{"ruleId":"255","severity":1,"message":"284","line":431,"column":93,"nodeType":"257","messageId":"258","endLine":431,"endColumn":95},{"ruleId":"255","severity":1,"message":"284","line":432,"column":86,"nodeType":"257","messageId":"258","endLine":432,"endColumn":88},{"ruleId":"255","severity":1,"message":"284","line":433,"column":88,"nodeType":"257","messageId":"258","endLine":433,"endColumn":90},{"ruleId":"236","severity":1,"message":"285","line":1,"column":10,"nodeType":"286","messageId":"239","endLine":1,"endColumn":16},{"ruleId":"236","severity":1,"message":"287","line":3,"column":9,"nodeType":"238","messageId":"239","endLine":3,"endColumn":21},{"ruleId":"236","severity":1,"message":"288","line":6,"column":9,"nodeType":"238","messageId":"239","endLine":6,"endColumn":16},{"ruleId":"236","severity":1,"message":"289","line":6,"column":18,"nodeType":"238","messageId":"239","endLine":6,"endColumn":37},{"ruleId":"236","severity":1,"message":"290","line":6,"column":38,"nodeType":"238","messageId":"239","endLine":6,"endColumn":42},{"ruleId":"236","severity":1,"message":"291","line":3,"column":13,"nodeType":"238","messageId":"239","endLine":3,"endColumn":15},{"ruleId":"236","severity":1,"message":"283","line":4,"column":10,"nodeType":"238","messageId":"239","endLine":4,"endColumn":15},{"ruleId":"255","severity":1,"message":"284","line":34,"column":14,"nodeType":"257","messageId":"258","endLine":34,"endColumn":16},{"ruleId":"292","severity":1,"message":"293","line":77,"column":17,"nodeType":"238","messageId":"294","endLine":77,"endColumn":23},{"ruleId":"236","severity":1,"message":"295","line":126,"column":21,"nodeType":"238","messageId":"239","endLine":126,"endColumn":23},{"ruleId":"296","severity":1,"message":"297","line":138,"column":201,"nodeType":"257","messageId":"298","endLine":138,"endColumn":202},{"ruleId":"236","severity":1,"message":"299","line":171,"column":17,"nodeType":"238","messageId":"239","endLine":171,"endColumn":19},{"ruleId":"236","severity":1,"message":"300","line":188,"column":17,"nodeType":"238","messageId":"239","endLine":188,"endColumn":19},{"ruleId":"236","severity":1,"message":"301","line":205,"column":17,"nodeType":"238","messageId":"239","endLine":205,"endColumn":19},{"ruleId":"236","severity":1,"message":"302","line":222,"column":17,"nodeType":"238","messageId":"239","endLine":222,"endColumn":19},{"ruleId":"236","severity":1,"message":"291","line":3,"column":13,"nodeType":"238","messageId":"239","endLine":3,"endColumn":15},{"ruleId":"236","severity":1,"message":"283","line":4,"column":10,"nodeType":"238","messageId":"239","endLine":4,"endColumn":15},{"ruleId":"255","severity":1,"message":"284","line":41,"column":14,"nodeType":"257","messageId":"258","endLine":41,"endColumn":16},{"ruleId":"236","severity":1,"message":"289","line":3,"column":22,"nodeType":"238","messageId":"239","endLine":3,"endColumn":41},{"ruleId":"236","severity":1,"message":"303","line":68,"column":21,"nodeType":"238","messageId":"239","endLine":68,"endColumn":23},{"ruleId":"236","severity":1,"message":"304","line":69,"column":21,"nodeType":"238","messageId":"239","endLine":69,"endColumn":23},{"ruleId":"292","severity":1,"message":"305","line":47,"column":21,"nodeType":"238","messageId":"294","endLine":47,"endColumn":22},{"ruleId":"306","severity":1,"message":"307","line":53,"column":49,"nodeType":"253","messageId":"308","endLine":55,"endColumn":26},"no-unused-vars","'data' is defined but never used.","Identifier","unusedVar","'Sk_BarChart' is defined but never used.","react/jsx-pascal-case","Imported JSX component My_Navbar must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","no-native-reassign",["309"],"no-negated-in-lhs",["310"],"Imported JSX component Sk_BarChart must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Sk_PieChart must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Sk_VoronoiDiagram must be in PascalCase or SCREAMING_SNAKE_CASE","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'bars' is assigned a value but never used.","'captions' is assigned a value but never used.",["309"],["310"],"expectedInside","'g' is assigned a value but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.",["309"],["310"],"'sort' is defined but never used.","'drag' is defined but never used.",["309"],["310"],"'key' is defined but never used.",["309"],["310"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'index' is defined but never used.","Expected '===' and instead saw '=='.","'google' is defined but never used.","Program","'withScriptjs' is defined but never used.","'getData' is defined but never used.","'getData_for_country' is defined but never used.","'pack' is defined but never used.","'d3' is defined but never used.","no-redeclare","'result' is already defined.","redeclared","'t4' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'l1' is assigned a value but never used.","'l2' is assigned a value but never used.","'l3' is assigned a value but never used.","'l4' is assigned a value but never used.","'kn' is assigned a value but never used.","'wn' is assigned a value but never used.","'i' is already defined.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'name'.","unsafeRefs","no-global-assign","no-unsafe-negation"]